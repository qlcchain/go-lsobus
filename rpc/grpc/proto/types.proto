syntax = "proto3";
package proto;
option go_package = ".;proto";

import "google/api/annotations.proto";

message VersionRequest{}

message VersionResponse {
  string buildTime = 1;
  string version = 2;
  string hash = 3;
}

service ChainAPI{
  rpc Version(VersionRequest) returns (VersionResponse){
    option (google.api.http) = {
      get: "/chain/version"
    };
  }
}

message User {
  string address = 1;
  string name = 2;
}

message ConnectionStaticParam {
  string itemId = 1;
  string buyerProductId = 2;
  string productId = 3;
  string srcCompanyName = 4;
  string srcRegion = 5;
  string srcCity = 6;
  string srcDataCenter = 7;
  string srcPort = 8;
  string dstCompanyName = 9;
  string dstRegion = 10;
  string dstCity = 11;
  string dstDataCenter = 12;
  string dstPort = 13;
}

message ConnectionDynamicParam {
  string orderId = 1;
  string quoteId = 2;
  string quoteItemId =3;
  string connectionName = 4;
  string paymentType = 5;
  string billingType = 6;
  string currency = 7;
  string serviceClass = 8;
  string bandwidth = 9;
  string billingUnit = 10;
  float price = 11;
  float Addition = 12;
  int64 startTime = 13;
  string startTimeStr = 14;
  int64 endTime = 15;
  string endTimeStrTimeStr = 16;
}

message ConnectionParam {
    ConnectionStaticParam staticParam = 1;
    ConnectionDynamicParam dynamicParam = 2;
}

message CreateOrderParam {
  ContractPrivacyParam privacy = 1;
  User buyer = 2;
  User seller = 3;
  repeated ConnectionParam connectionParam = 4;
}

message OrderId {
  string internalId = 1;
}

message GetOrderInfoByInternalId {
  string internalId = 1;
}

message OrderLifeTrack {
  string contractState = 1;
  string orderState =2;
  string reason = 3;
  int64  time = 4;
  string Hash = 5;
}

message OrderInfo {
  User buyer = 1;
  User seller = 2;
  string orderId = 3;
  string orderType = 4;
  string orderState = 5;
  string contractState = 6;
  repeated ConnectionParam connections = 7;
  repeated OrderLifeTrack track = 8;
}

message ContractPrivacyParam {
  string privateFrom = 1;
  repeated string privateFor =2;
  string privateGroupID = 3;
}

message ChangeConnectionParam {
  string productId = 1;
  ConnectionDynamicParam dynamicParam = 2;
}

message ChangeOrderParam {
  ContractPrivacyParam privacy = 1;
  User buyer = 2;
  User seller = 3;
  repeated ChangeConnectionParam changeConnectionParam = 4;
}

message TerminateConnectionParam {
  string productId = 1;
  ConnectionDynamicParam dynamicParam = 2;
}

message TerminateOrderParam {
  ContractPrivacyParam privacy = 1;
  User buyer = 2;
  User seller = 3;
  repeated TerminateConnectionParam terminateConnectionParam = 4;
}

service OrderAPI{
  rpc CreateOrder(CreateOrderParam) returns (OrderId){
    option (google.api.http) = {
      post: "/order/create"
      body: "*"
    };
  }
  rpc GetOrderInfo(GetOrderInfoByInternalId) returns (OrderInfo){
    option (google.api.http) = {
      get: "/order/info"
    };
  }
  rpc ChangeOrder(ChangeOrderParam) returns (OrderId){
    option (google.api.http) = {
      post: "/order/change"
      body: "*"
    };
  }
  rpc TerminateOrder(TerminateOrderParam) returns (OrderId){
    option (google.api.http) = {
      post: "/order/terminate"
      body: "*"
    };
  }
}

