// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorRepresentation Standard Class used to describe API response error
//
// swagger:model ErrorRepresentation
type ErrorRepresentation struct {

	// Link to the schema describing the REST resource
	// Used to extend Error class
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Type of the REST resource
	// Used to extend Error class
	AtType string `json:"@type,omitempty"`

	// Application related code (as defined in the API or from a common list)
	// Required: true
	Code *int32 `json:"code"`

	// Text that provide mode details and corrective actions related to the error.  This can be shown to a client user.
	Message string `json:"message,omitempty"`

	// Text that explains the reason for error. This can be shown to a client user.
	// Required: true
	Reason *string `json:"reason"`

	// url pointing to documentation describing the error
	ReferenceError string `json:"referenceError,omitempty"`

	// Http error code extension like 400-2 for example
	Status string `json:"status,omitempty"`
}

// Validate validates this error representation
func (m *ErrorRepresentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorRepresentation) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ErrorRepresentation) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorRepresentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorRepresentation) UnmarshalBinary(b []byte) error {
	var res ErrorRepresentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
