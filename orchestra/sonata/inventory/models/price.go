// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Price Provides pre tax amount for a product
//
// swagger:model Price
type Price struct {

	// Technical attribute to extend this class
	AtType string `json:"@type,omitempty"`

	// duty free amount
	DutyFreeAmount *Money `json:"dutyFreeAmount,omitempty"`

	// tax included amount
	TaxIncludedAmount *Money `json:"taxIncludedAmount,omitempty"`

	// Applied tax rate on amount
	TaxRate float32 `json:"taxRate,omitempty"`
}

// Validate validates this price
func (m *Price) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDutyFreeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIncludedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Price) validateDutyFreeAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.DutyFreeAmount) { // not required
		return nil
	}

	if m.DutyFreeAmount != nil {
		if err := m.DutyFreeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dutyFreeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Price) validateTaxIncludedAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxIncludedAmount) { // not required
		return nil
	}

	if m.TaxIncludedAmount != nil {
		if err := m.TaxIncludedAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxIncludedAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Price) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Price) UnmarshalBinary(b []byte) error {
	var res Price
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
