// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FieldedAddress A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail.  For example “street number” is one field, “street name” is another field, etc.
//
// swagger:model FieldedAddress
type FieldedAddress struct {

	// The city that the address is in
	// Required: true
	City *string `json:"city"`

	// Country that the address is in
	// Required: true
	Country *string `json:"country"`

	// geographic sub address
	GeographicSubAddress *GeographicSubAddress `json:"geographicSubAddress,omitempty"`

	// id of the fielded address
	ID string `json:"id,omitempty"`

	// The locality that the address is in
	Locality string `json:"locality,omitempty"`

	// Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)
	// Required: true
	Postcode *string `json:"postcode"`

	// An extension of a postal code. E.g. the part following the dash in an american urban property address
	PostcodeExtension string `json:"postcodeExtension,omitempty"`

	// The State or Province that the address is in
	// Required: true
	StateOrProvince *string `json:"stateOrProvince"`

	// Name of the street or other street type
	StreetName string `json:"streetName,omitempty"`

	// Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses
	StreetNr string `json:"streetNr,omitempty"`

	// Last number in a range of street numbers allocated to a property
	StreetNrLast string `json:"streetNrLast,omitempty"`

	// Last street number suffix for a ranged address
	StreetNrLastSuffix string `json:"streetNrLastSuffix,omitempty"`

	// The first street number suffix
	StreetNrSuffix string `json:"streetNrSuffix,omitempty"`

	// A modifier denoting a relative direction
	StreetSuffix string `json:"streetSuffix,omitempty"`

	// Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf
	// Required: true
	StreetType *string `json:"streetType"`
}

// Validate validates this fielded address
func (m *FieldedAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeographicSubAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldedAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *FieldedAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *FieldedAddress) validateGeographicSubAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.GeographicSubAddress) { // not required
		return nil
	}

	if m.GeographicSubAddress != nil {
		if err := m.GeographicSubAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geographicSubAddress")
			}
			return err
		}
	}

	return nil
}

func (m *FieldedAddress) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *FieldedAddress) validateStateOrProvince(formats strfmt.Registry) error {

	if err := validate.Required("stateOrProvince", "body", m.StateOrProvince); err != nil {
		return err
	}

	return nil
}

func (m *FieldedAddress) validateStreetType(formats strfmt.Registry) error {

	if err := validate.Required("streetType", "body", m.StreetType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldedAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldedAddress) UnmarshalBinary(b []byte) error {
	var res FieldedAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
