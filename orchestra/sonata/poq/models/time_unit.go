// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TimeUnit Represents a unit of time.
//
// swagger:model TimeUnit
type TimeUnit string

const (

	// TimeUnitCalendarDays captures enum value "calendarDays"
	TimeUnitCalendarDays TimeUnit = "calendarDays"

	// TimeUnitCalendarHours captures enum value "calendarHours"
	TimeUnitCalendarHours TimeUnit = "calendarHours"

	// TimeUnitCalendarMinutes captures enum value "calendarMinutes"
	TimeUnitCalendarMinutes TimeUnit = "calendarMinutes"

	// TimeUnitBusinessDays captures enum value "businessDays"
	TimeUnitBusinessDays TimeUnit = "businessDays"

	// TimeUnitBusinessHours captures enum value "businessHours"
	TimeUnitBusinessHours TimeUnit = "businessHours"

	// TimeUnitBusinessMinutes captures enum value "businessMinutes"
	TimeUnitBusinessMinutes TimeUnit = "businessMinutes"
)

// for schema
var timeUnitEnum []interface{}

func init() {
	var res []TimeUnit
	if err := json.Unmarshal([]byte(`["calendarDays","calendarHours","calendarMinutes","businessDays","businessHours","businessMinutes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeUnitEnum = append(timeUnitEnum, v)
	}
}

func (m TimeUnit) validateTimeUnitEnum(path, location string, value TimeUnit) error {
	if err := validate.Enum(path, location, value, timeUnitEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this time unit
func (m TimeUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTimeUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
