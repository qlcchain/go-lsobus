// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOfferingQualificationItemCreate This structure serves as a request for a product offering qualification item
// An individual article included in a POQ that describes a Product of a particular type (Product Offering) being delivered to a specific geographical location.  The objective is to determine if it is feasible for the Seller to deliver this item as described and for the Seller to inform the Buyer of the estimated time interval to complete this delivery.
//
// swagger:model ProductOfferingQualificationItem_Create
type ProductOfferingQualificationItemCreate struct {

	// When sub-classing, this defines the sub-class entity name
	AtType string `json:"@type,omitempty"`

	// action
	Action ProductActionType `json:"action,omitempty"`

	// Id of the productOfferingQualification item.
	// This id must be unique within POQ create request
	// Required: true
	ID *string `json:"id"`

	// product
	// Required: true
	Product *Product `json:"product"`

	// product offering
	ProductOffering *ProductOfferingRef `json:"productOffering,omitempty"`

	// product offering qualification item relationship
	ProductOfferingQualificationItemRelationship []*ProductOfferingQualificationItemRelationship `json:"productOfferingQualificationItemRelationship"`

	// related party
	RelatedParty []*RelatedParty `json:"relatedParty"`
}

// Validate validates this product offering qualification item create
func (m *ProductOfferingQualificationItemCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOffering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOfferingQualificationItemRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateProductOffering(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductOffering) { // not required
		return nil
	}

	if m.ProductOffering != nil {
		if err := m.ProductOffering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productOffering")
			}
			return err
		}
	}

	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateProductOfferingQualificationItemRelationship(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductOfferingQualificationItemRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductOfferingQualificationItemRelationship); i++ {
		if swag.IsZero(m.ProductOfferingQualificationItemRelationship[i]) { // not required
			continue
		}

		if m.ProductOfferingQualificationItemRelationship[i] != nil {
			if err := m.ProductOfferingQualificationItemRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("productOfferingQualificationItemRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOfferingQualificationItemCreate) validateRelatedParty(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedParty) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOfferingQualificationItemCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOfferingQualificationItemCreate) UnmarshalBinary(b []byte) error {
	var res ProductOfferingQualificationItemCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
