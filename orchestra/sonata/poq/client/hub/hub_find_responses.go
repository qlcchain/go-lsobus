// Code generated by go-swagger; DO NOT EDIT.

package hub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qlcchain/go-lsobus/orchestra/sonata/poq/models"
)

// HubFindReader is a Reader for the HubFind structure.
type HubFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HubFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHubFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHubFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHubFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHubFindForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHubFindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewHubFindRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewHubFindUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewHubFindServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHubFindOK creates a HubFindOK with default headers values
func NewHubFindOK() *HubFindOK {
	return &HubFindOK{}
}

/*HubFindOK handles this case with default header values.

Ok
*/
type HubFindOK struct {
	Payload []*models.Hub
}

func (o *HubFindOK) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindOK  %+v", 200, o.Payload)
}

func (o *HubFindOK) GetPayload() []*models.Hub {
	return o.Payload
}

func (o *HubFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindBadRequest creates a HubFindBadRequest with default headers values
func NewHubFindBadRequest() *HubFindBadRequest {
	return &HubFindBadRequest{}
}

/*HubFindBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type HubFindBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindBadRequest) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindBadRequest  %+v", 400, o.Payload)
}

func (o *HubFindBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindUnauthorized creates a HubFindUnauthorized with default headers values
func NewHubFindUnauthorized() *HubFindUnauthorized {
	return &HubFindUnauthorized{}
}

/*HubFindUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type HubFindUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindUnauthorized) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindUnauthorized  %+v", 401, o.Payload)
}

func (o *HubFindUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindForbidden creates a HubFindForbidden with default headers values
func NewHubFindForbidden() *HubFindForbidden {
	return &HubFindForbidden{}
}

/*HubFindForbidden handles this case with default header values.

Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type HubFindForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindForbidden) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindForbidden  %+v", 403, o.Payload)
}

func (o *HubFindForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindNotFound creates a HubFindNotFound with default headers values
func NewHubFindNotFound() *HubFindNotFound {
	return &HubFindNotFound{}
}

/*HubFindNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type HubFindNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindNotFound) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindNotFound  %+v", 404, o.Payload)
}

func (o *HubFindNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindRequestTimeout creates a HubFindRequestTimeout with default headers values
func NewHubFindRequestTimeout() *HubFindRequestTimeout {
	return &HubFindRequestTimeout{}
}

/*HubFindRequestTimeout handles this case with default header values.

Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type HubFindRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindRequestTimeout  %+v", 408, o.Payload)
}

func (o *HubFindRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindUnprocessableEntity creates a HubFindUnprocessableEntity with default headers values
func NewHubFindUnprocessableEntity() *HubFindUnprocessableEntity {
	return &HubFindUnprocessableEntity{}
}

/*HubFindUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error
*/
type HubFindUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *HubFindUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHubFindServiceUnavailable creates a HubFindServiceUnavailable with default headers values
func NewHubFindServiceUnavailable() *HubFindServiceUnavailable {
	return &HubFindServiceUnavailable{}
}

/*HubFindServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type HubFindServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *HubFindServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /hub][%d] hubFindServiceUnavailable  %+v", 503, o.Payload)
}

func (o *HubFindServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *HubFindServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
