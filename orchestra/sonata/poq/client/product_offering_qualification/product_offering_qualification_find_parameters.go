// Code generated by go-swagger; DO NOT EDIT.

package product_offering_qualification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewProductOfferingQualificationFindParams creates a new ProductOfferingQualificationFindParams object
// with the default values initialized.
func NewProductOfferingQualificationFindParams() *ProductOfferingQualificationFindParams {
	var ()
	return &ProductOfferingQualificationFindParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProductOfferingQualificationFindParamsWithTimeout creates a new ProductOfferingQualificationFindParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProductOfferingQualificationFindParamsWithTimeout(timeout time.Duration) *ProductOfferingQualificationFindParams {
	var ()
	return &ProductOfferingQualificationFindParams{

		timeout: timeout,
	}
}

// NewProductOfferingQualificationFindParamsWithContext creates a new ProductOfferingQualificationFindParams object
// with the default values initialized, and the ability to set a context for a request
func NewProductOfferingQualificationFindParamsWithContext(ctx context.Context) *ProductOfferingQualificationFindParams {
	var ()
	return &ProductOfferingQualificationFindParams{

		Context: ctx,
	}
}

// NewProductOfferingQualificationFindParamsWithHTTPClient creates a new ProductOfferingQualificationFindParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProductOfferingQualificationFindParamsWithHTTPClient(client *http.Client) *ProductOfferingQualificationFindParams {
	var ()
	return &ProductOfferingQualificationFindParams{
		HTTPClient: client,
	}
}

/*ProductOfferingQualificationFindParams contains all the parameters to send to the API endpoint
for the product offering qualification find operation typically these are written to a http.Request
*/
type ProductOfferingQualificationFindParams struct {

	/*Limit
	  Requested number of resources to be provided in response requested by client

	*/
	Limit *string
	/*Offset
	  Requested index for start of resources to be provided in response requested by client

	*/
	Offset *string
	/*ProjectID
	  Identifier of buyer project associated to POQ

	*/
	ProjectID *string
	/*RequestedResponseDateGt
	  POQ expected response date is after this date

	*/
	RequestedResponseDateGt *strfmt.DateTime
	/*RequestedResponseDateLt
	  POQ expected response date is before this date

	*/
	RequestedResponseDateLt *strfmt.DateTime
	/*State
	  State of the POQ to be retrieeved

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithTimeout(timeout time.Duration) *ProductOfferingQualificationFindParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithContext(ctx context.Context) *ProductOfferingQualificationFindParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithHTTPClient(client *http.Client) *ProductOfferingQualificationFindParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithLimit(limit *string) *ProductOfferingQualificationFindParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithOffset(offset *string) *ProductOfferingQualificationFindParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProjectID adds the projectID to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithProjectID(projectID *string) *ProductOfferingQualificationFindParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithRequestedResponseDateGt adds the requestedResponseDateGt to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithRequestedResponseDateGt(requestedResponseDateGt *strfmt.DateTime) *ProductOfferingQualificationFindParams {
	o.SetRequestedResponseDateGt(requestedResponseDateGt)
	return o
}

// SetRequestedResponseDateGt adds the requestedResponseDateGt to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetRequestedResponseDateGt(requestedResponseDateGt *strfmt.DateTime) {
	o.RequestedResponseDateGt = requestedResponseDateGt
}

// WithRequestedResponseDateLt adds the requestedResponseDateLt to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithRequestedResponseDateLt(requestedResponseDateLt *strfmt.DateTime) *ProductOfferingQualificationFindParams {
	o.SetRequestedResponseDateLt(requestedResponseDateLt)
	return o
}

// SetRequestedResponseDateLt adds the requestedResponseDateLt to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetRequestedResponseDateLt(requestedResponseDateLt *strfmt.DateTime) {
	o.RequestedResponseDateLt = requestedResponseDateLt
}

// WithState adds the state to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) WithState(state *string) *ProductOfferingQualificationFindParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the product offering qualification find params
func (o *ProductOfferingQualificationFindParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *ProductOfferingQualificationFindParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.RequestedResponseDateGt != nil {

		// query param requestedResponseDate.gt
		var qrRequestedResponseDateGt strfmt.DateTime
		if o.RequestedResponseDateGt != nil {
			qrRequestedResponseDateGt = *o.RequestedResponseDateGt
		}
		qRequestedResponseDateGt := qrRequestedResponseDateGt.String()
		if qRequestedResponseDateGt != "" {
			if err := r.SetQueryParam("requestedResponseDate.gt", qRequestedResponseDateGt); err != nil {
				return err
			}
		}

	}

	if o.RequestedResponseDateLt != nil {

		// query param requestedResponseDate.lt
		var qrRequestedResponseDateLt strfmt.DateTime
		if o.RequestedResponseDateLt != nil {
			qrRequestedResponseDateLt = *o.RequestedResponseDateLt
		}
		qRequestedResponseDateLt := qrRequestedResponseDateLt.String()
		if qRequestedResponseDateLt != "" {
			if err := r.SetQueryParam("requestedResponseDate.lt", qRequestedResponseDateLt); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
