// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BandwidthProfile bandwidth profile
//
// swagger:model bandwidthProfile
type BandwidthProfile struct {

	// As defined in MEF 26.2 for ENNI & 10.3 for UNI, this value is expressed as bytes
	Cbs int32 `json:"cbs,omitempty"`

	// cir
	Cir *InformationRate `json:"cir,omitempty"`

	// This enumeration indicates whether the Color Identifier of the Service Frame is considered by the Bandwidth Profile Algorithm
	// Enum: [COLOR_AWARE COLOR_BLIND]
	ColorMode string `json:"colorMode,omitempty"`

	// The Bandwidth Profile parameter that determines whether overflow tokens not used for Service Frames declared Green can be used as Yellow tokens.
	CouplingFlag bool `json:"couplingFlag,omitempty"`

	// As defined in MEF 26.2 for ENNI & 10.3 for UNI, this value is expressed as bytes
	Ebs int32 `json:"ebs,omitempty"`

	// eir
	Eir *InformationRate `json:"eir,omitempty"`
}

// Validate validates this bandwidth profile
func (m *BandwidthProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColorMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEir(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthProfile) validateCir(formats strfmt.Registry) error {

	if swag.IsZero(m.Cir) { // not required
		return nil
	}

	if m.Cir != nil {
		if err := m.Cir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cir")
			}
			return err
		}
	}

	return nil
}

var bandwidthProfileTypeColorModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COLOR_AWARE","COLOR_BLIND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bandwidthProfileTypeColorModePropEnum = append(bandwidthProfileTypeColorModePropEnum, v)
	}
}

const (

	// BandwidthProfileColorModeCOLORAWARE captures enum value "COLOR_AWARE"
	BandwidthProfileColorModeCOLORAWARE string = "COLOR_AWARE"

	// BandwidthProfileColorModeCOLORBLIND captures enum value "COLOR_BLIND"
	BandwidthProfileColorModeCOLORBLIND string = "COLOR_BLIND"
)

// prop value enum
func (m *BandwidthProfile) validateColorModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bandwidthProfileTypeColorModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BandwidthProfile) validateColorMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ColorMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateColorModeEnum("colorMode", "body", m.ColorMode); err != nil {
		return err
	}

	return nil
}

func (m *BandwidthProfile) validateEir(formats strfmt.Registry) error {

	if swag.IsZero(m.Eir) { // not required
		return nil
	}

	if m.Eir != nil {
		if err := m.Eir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eir")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthProfile) UnmarshalBinary(b []byte) error {
	var res BandwidthProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
