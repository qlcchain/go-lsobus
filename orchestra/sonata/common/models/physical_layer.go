// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PhysicalLayer physical layer
//
// swagger:model physicalLayer
type PhysicalLayer string

const (

	// PhysicalLayerNr10BASET captures enum value "10BASE-T"
	PhysicalLayerNr10BASET PhysicalLayer = "10BASE-T"

	// PhysicalLayerNr100BASETX captures enum value "100BASE-TX"
	PhysicalLayerNr100BASETX PhysicalLayer = "100BASE-TX"

	// PhysicalLayerNr100BASEFX captures enum value "100BASE-FX"
	PhysicalLayerNr100BASEFX PhysicalLayer = "100BASE-FX"

	// PhysicalLayerNr1000BASET captures enum value "1000BASE-T"
	PhysicalLayerNr1000BASET PhysicalLayer = "1000BASE-T"

	// PhysicalLayerNr1000BASESX captures enum value "1000BASE-SX"
	PhysicalLayerNr1000BASESX PhysicalLayer = "1000BASE-SX"

	// PhysicalLayerNr1000BASELX captures enum value "1000BASE-LX"
	PhysicalLayerNr1000BASELX PhysicalLayer = "1000BASE-LX"

	// PhysicalLayerNr10GBASESR captures enum value "10GBASE-SR"
	PhysicalLayerNr10GBASESR PhysicalLayer = "10GBASE-SR"

	// PhysicalLayerNr10GBASESW captures enum value "10GBASE-SW"
	PhysicalLayerNr10GBASESW PhysicalLayer = "10GBASE-SW"

	// PhysicalLayerNr10GBASELR captures enum value "10GBASE-LR"
	PhysicalLayerNr10GBASELR PhysicalLayer = "10GBASE-LR"

	// PhysicalLayerNr10GBASELX4 captures enum value "10GBASE-LX4"
	PhysicalLayerNr10GBASELX4 PhysicalLayer = "10GBASE-LX4"

	// PhysicalLayerNr10GBASELW captures enum value "10GBASE-LW"
	PhysicalLayerNr10GBASELW PhysicalLayer = "10GBASE-LW"

	// PhysicalLayerNr10GBASEER captures enum value "10GBASE-ER"
	PhysicalLayerNr10GBASEER PhysicalLayer = "10GBASE-ER"

	// PhysicalLayerNr10GBASEEW captures enum value "10GBASE-EW"
	PhysicalLayerNr10GBASEEW PhysicalLayer = "10GBASE-EW"
)

// for schema
var physicalLayerEnum []interface{}

func init() {
	var res []PhysicalLayer
	if err := json.Unmarshal([]byte(`["10BASE-T","100BASE-TX","100BASE-FX","1000BASE-T","1000BASE-SX","1000BASE-LX","10GBASE-SR","10GBASE-SW","10GBASE-LR","10GBASE-LX4","10GBASE-LW","10GBASE-ER","10GBASE-EW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		physicalLayerEnum = append(physicalLayerEnum, v)
	}
}

func (m PhysicalLayer) validatePhysicalLayerEnum(path, location string, value PhysicalLayer) error {
	if err := validate.Enum(path, location, value, physicalLayerEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this physical layer
func (m PhysicalLayer) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePhysicalLayerEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
