// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GeographicAddress An address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently)
//
// swagger:model GeographicAddress
type GeographicAddress struct {

	// Technical attribute to extend this class
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Technical attribute to extend this class
	AtType string `json:"@type,omitempty"`

	// This attribute specifies if a Buyer must use one of the known existing Service Sites at this location for any Products delivered to this Address.  For example, if a particular building owner mandated that all interconnects be done in a shared Public Meet-Me-Room, this attribute would be set to False for that Address.
	AllowsNewSite bool `json:"allowsNewSite,omitempty"`

	// fielded address
	FieldedAddress *FieldedAddress `json:"fieldedAddress,omitempty"`

	// formatted address
	FormattedAddress *FormattedAddress `json:"formattedAddress,omitempty"`

	// geographic location
	GeographicLocation *GeographicLocation `json:"geographicLocation,omitempty"`

	// This attribute specifies if that Address contains Service Sites that are public such as Meet-Me-Rooms at an interconnect location or a shared telecom room in the basement of a multi-tenant building.
	HasPublicSite bool `json:"hasPublicSite,omitempty"`

	// Unique identifier of the address
	ID string `json:"id,omitempty"`

	// referenced address
	ReferencedAddress *ReferencedAddress `json:"referencedAddress,omitempty"`
}

// Validate validates this geographic address
func (m *GeographicAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldedAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormattedAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeographicLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencedAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeographicAddress) validateFieldedAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldedAddress) { // not required
		return nil
	}

	if m.FieldedAddress != nil {
		if err := m.FieldedAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldedAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GeographicAddress) validateFormattedAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FormattedAddress) { // not required
		return nil
	}

	if m.FormattedAddress != nil {
		if err := m.FormattedAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formattedAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GeographicAddress) validateGeographicLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.GeographicLocation) { // not required
		return nil
	}

	if m.GeographicLocation != nil {
		if err := m.GeographicLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geographicLocation")
			}
			return err
		}
	}

	return nil
}

func (m *GeographicAddress) validateReferencedAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferencedAddress) { // not required
		return nil
	}

	if m.ReferencedAddress != nil {
		if err := m.ReferencedAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("referencedAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeographicAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeographicAddress) UnmarshalBinary(b []byte) error {
	var res GeographicAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
