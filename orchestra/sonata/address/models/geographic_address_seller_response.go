// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GeographicAddressSellerResponse An address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently)
//
// swagger:model GeographicAddressSellerResponse
type GeographicAddressSellerResponse struct {

	// Technical attribute to extend this class
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Technical attribute to extend this class
	AtType string `json:"@type,omitempty"`

	// This attribute specifies if a Buyer must use one of the known existing Service Sites at this location for any Products delivered to this Address.  For example, if a particular building owner mandated that all interconnects be done in a shared Public Meet-Me-Room, this attribute would be set to False for that Address.
	AllowsNewSite bool `json:"allowsNewSite,omitempty"`

	// fielded address
	FieldedAddress *FieldedAddress `json:"fieldedAddress,omitempty"`

	// formatted address
	FormattedAddress *FormattedAddress `json:"formattedAddress,omitempty"`

	// This attribute specifies if that Address contains Service Sites that are public such as Meet-Me-Rooms at an interconnect location or a shared telecom room in the basement of a multi-tenant building
	HasPublicSite bool `json:"hasPublicSite,omitempty"`

	// Unique identifier of the address
	ID string `json:"id,omitempty"`

	// For each Address returned, this attribute specifies if the Seller believes this is the best match to the Buyer specified Address.  Setting this to TRUE also represents that the Seller believes this is likely a direct match to the Buyer Specified Address.
	// Required: true
	IsBestMatch *bool `json:"isBestMatch"`
}

// Validate validates this geographic address seller response
func (m *GeographicAddressSellerResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldedAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormattedAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBestMatch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeographicAddressSellerResponse) validateFieldedAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldedAddress) { // not required
		return nil
	}

	if m.FieldedAddress != nil {
		if err := m.FieldedAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldedAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GeographicAddressSellerResponse) validateFormattedAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.FormattedAddress) { // not required
		return nil
	}

	if m.FormattedAddress != nil {
		if err := m.FormattedAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formattedAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GeographicAddressSellerResponse) validateIsBestMatch(formats strfmt.Registry) error {

	if err := validate.Required("isBestMatch", "body", m.IsBestMatch); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeographicAddressSellerResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeographicAddressSellerResponse) UnmarshalBinary(b []byte) error {
	var res GeographicAddressSellerResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
