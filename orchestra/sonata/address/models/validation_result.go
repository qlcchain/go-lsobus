// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ValidationResult Validation Result
//
// swagger:model ValidationResult
type ValidationResult string

const (

	// ValidationResultSuccess captures enum value "success"
	ValidationResultSuccess ValidationResult = "success"

	// ValidationResultFails captures enum value "fails"
	ValidationResultFails ValidationResult = "fails"

	// ValidationResultPartial captures enum value "partial"
	ValidationResultPartial ValidationResult = "partial"
)

// for schema
var validationResultEnum []interface{}

func init() {
	var res []ValidationResult
	if err := json.Unmarshal([]byte(`["success","fails","partial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationResultEnum = append(validationResultEnum, v)
	}
}

func (m ValidationResult) validateValidationResultEnum(path, location string, value ValidationResult) error {
	if err := validate.Enum(path, location, value, validationResultEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this validation result
func (m ValidationResult) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateValidationResultEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
