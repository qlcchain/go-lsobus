// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NotificationQuoteStateChangeNotificationHandlerFunc turns a function with the right signature into a notification quote state change notification handler
type NotificationQuoteStateChangeNotificationHandlerFunc func(NotificationQuoteStateChangeNotificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NotificationQuoteStateChangeNotificationHandlerFunc) Handle(params NotificationQuoteStateChangeNotificationParams) middleware.Responder {
	return fn(params)
}

// NotificationQuoteStateChangeNotificationHandler interface for that can handle valid notification quote state change notification params
type NotificationQuoteStateChangeNotificationHandler interface {
	Handle(NotificationQuoteStateChangeNotificationParams) middleware.Responder
}

// NewNotificationQuoteStateChangeNotification creates a new http.Handler for the notification quote state change notification operation
func NewNotificationQuoteStateChangeNotification(ctx *middleware.Context, handler NotificationQuoteStateChangeNotificationHandler) *NotificationQuoteStateChangeNotification {
	return &NotificationQuoteStateChangeNotification{Context: ctx, Handler: handler}
}

/*NotificationQuoteStateChangeNotification swagger:route POST /notification/quoteStateChangeNotification Notification notificationQuoteStateChangeNotification

Quote state change notification structure

Quote state change notification structure description

Specific business errors for current operation will be encapsulated in

HTTP Response 422 Unprocessable entity


*/
type NotificationQuoteStateChangeNotification struct {
	Context *middleware.Context
	Handler NotificationQuoteStateChangeNotificationHandler
}

func (o *NotificationQuoteStateChangeNotification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNotificationQuoteStateChangeNotificationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
