// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteState quote state
//
// swagger:model QuoteState
type QuoteState string

const (

	// QuoteStateINPROGRESS captures enum value "IN_PROGRESS"
	QuoteStateINPROGRESS QuoteState = "IN_PROGRESS"

	// QuoteStateREADY captures enum value "READY"
	QuoteStateREADY QuoteState = "READY"

	// QuoteStateCANCELLED captures enum value "CANCELLED"
	QuoteStateCANCELLED QuoteState = "CANCELLED"

	// QuoteStateREJECTED captures enum value "REJECTED"
	QuoteStateREJECTED QuoteState = "REJECTED"

	// QuoteStateACCEPTED captures enum value "ACCEPTED"
	QuoteStateACCEPTED QuoteState = "ACCEPTED"

	// QuoteStateEXPIRED captures enum value "EXPIRED"
	QuoteStateEXPIRED QuoteState = "EXPIRED"

	// QuoteStateUNABLETOPROVIDE captures enum value "UNABLE_TO_PROVIDE"
	QuoteStateUNABLETOPROVIDE QuoteState = "UNABLE_TO_PROVIDE"
)

// for schema
var quoteStateEnum []interface{}

func init() {
	var res []QuoteState
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","READY","CANCELLED","REJECTED","ACCEPTED","EXPIRED","UNABLE_TO_PROVIDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteStateEnum = append(quoteStateEnum, v)
	}
}

func (m QuoteState) validateQuoteStateEnum(path, location string, value QuoteState) error {
	if err := validate.Enum(path, location, value, quoteStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote state
func (m QuoteState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
