// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelatedPartyRole A party role (not a party) playing a role for this quote or quote Item.
//
// swagger:model RelatedPartyRole
type RelatedPartyRole struct {

	// Referred type for this party role
	// Technical attribute
	AtReferredType string `json:"@referredType,omitempty"`

	// id of the party role
	ID string `json:"id,omitempty"`

	// related party
	// Required: true
	RelatedParty *RelatedParty `json:"relatedParty"`

	// Role played for this party role. Could be 'buyer’, ‘seller’ for example.
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this related party role
func (m *RelatedPartyRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedPartyRole) validateRelatedParty(formats strfmt.Registry) error {

	if err := validate.Required("relatedParty", "body", m.RelatedParty); err != nil {
		return err
	}

	if m.RelatedParty != nil {
		if err := m.RelatedParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedParty")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedPartyRole) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelatedPartyRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedPartyRole) UnmarshalBinary(b []byte) error {
	var res RelatedPartyRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
