// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProductActionType An enumeration of valid order item actions
//
// swagger:model ProductActionType
type ProductActionType string

const (

	// ProductActionTypeAdd captures enum value "add"
	ProductActionTypeAdd ProductActionType = "add"

	// ProductActionTypeChange captures enum value "change"
	ProductActionTypeChange ProductActionType = "change"

	// ProductActionTypeRemove captures enum value "remove"
	ProductActionTypeRemove ProductActionType = "remove"

	// ProductActionTypeNoChange captures enum value "noChange"
	ProductActionTypeNoChange ProductActionType = "noChange"
)

// for schema
var productActionTypeEnum []interface{}

func init() {
	var res []ProductActionType
	if err := json.Unmarshal([]byte(`["add","change","remove","noChange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productActionTypeEnum = append(productActionTypeEnum, v)
	}
}

func (m ProductActionType) validateProductActionTypeEnum(path, location string, value ProductActionType) error {
	if err := validate.Enum(path, location, value, productActionTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this product action type
func (m ProductActionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProductActionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
