// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoqItemEvent The product offering qualification item event structure that gets passed in the "event" of a notification.
//
// swagger:model PoqItemEvent
type PoqItemEvent struct {

	// Desired Activation Date for the product requested in this item
	// Format: date
	DesiredActivationDate strfmt.Date `json:"desiredActivationDate,omitempty"`

	// Id of this POQ item
	// Required: true
	ID *string `json:"id"`

	// serviceability confidence
	ServiceabilityConfidence ServiceabilityColor `json:"serviceabilityConfidence,omitempty"`

	// state
	State QualificationState `json:"state,omitempty"`
}

// Validate validates this poq item event
func (m *PoqItemEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredActivationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceabilityConfidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoqItemEvent) validateDesiredActivationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DesiredActivationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("desiredActivationDate", "body", "date", m.DesiredActivationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PoqItemEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PoqItemEvent) validateServiceabilityConfidence(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceabilityConfidence) { // not required
		return nil
	}

	if err := m.ServiceabilityConfidence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceabilityConfidence")
		}
		return err
	}

	return nil
}

func (m *PoqItemEvent) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoqItemEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoqItemEvent) UnmarshalBinary(b []byte) error {
	var res PoqItemEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
