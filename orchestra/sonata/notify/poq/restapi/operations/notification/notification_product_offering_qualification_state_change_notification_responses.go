// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/qlcchain/go-lsobus/orchestra/sonata/notify/poq/models"
)

// NotificationProductOfferingQualificationStateChangeNotificationNoContentCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationNoContent
const NotificationProductOfferingQualificationStateChangeNotificationNoContentCode int = 204

/*NotificationProductOfferingQualificationStateChangeNotificationNoContent No Content

swagger:response notificationProductOfferingQualificationStateChangeNotificationNoContent
*/
type NotificationProductOfferingQualificationStateChangeNotificationNoContent struct {
}

// NewNotificationProductOfferingQualificationStateChangeNotificationNoContent creates NotificationProductOfferingQualificationStateChangeNotificationNoContent with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationNoContent() *NotificationProductOfferingQualificationStateChangeNotificationNoContent {

	return &NotificationProductOfferingQualificationStateChangeNotificationNoContent{}
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// NotificationProductOfferingQualificationStateChangeNotificationBadRequestCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationBadRequest
const NotificationProductOfferingQualificationStateChangeNotificationBadRequestCode int = 400

/*NotificationProductOfferingQualificationStateChangeNotificationBadRequest Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value

swagger:response notificationProductOfferingQualificationStateChangeNotificationBadRequest
*/
type NotificationProductOfferingQualificationStateChangeNotificationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationBadRequest creates NotificationProductOfferingQualificationStateChangeNotificationBadRequest with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationBadRequest() *NotificationProductOfferingQualificationStateChangeNotificationBadRequest {

	return &NotificationProductOfferingQualificationStateChangeNotificationBadRequest{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification bad request response
func (o *NotificationProductOfferingQualificationStateChangeNotificationBadRequest) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification bad request response
func (o *NotificationProductOfferingQualificationStateChangeNotificationBadRequest) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationUnauthorizedCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationUnauthorized
const NotificationProductOfferingQualificationStateChangeNotificationUnauthorizedCode int = 401

/*NotificationProductOfferingQualificationStateChangeNotificationUnauthorized Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials

swagger:response notificationProductOfferingQualificationStateChangeNotificationUnauthorized
*/
type NotificationProductOfferingQualificationStateChangeNotificationUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationUnauthorized creates NotificationProductOfferingQualificationStateChangeNotificationUnauthorized with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationUnauthorized() *NotificationProductOfferingQualificationStateChangeNotificationUnauthorized {

	return &NotificationProductOfferingQualificationStateChangeNotificationUnauthorized{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification unauthorized response
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnauthorized) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification unauthorized response
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnauthorized) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationForbiddenCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationForbidden
const NotificationProductOfferingQualificationStateChangeNotificationForbiddenCode int = 403

/*NotificationProductOfferingQualificationStateChangeNotificationForbidden Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests

swagger:response notificationProductOfferingQualificationStateChangeNotificationForbidden
*/
type NotificationProductOfferingQualificationStateChangeNotificationForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationForbidden creates NotificationProductOfferingQualificationStateChangeNotificationForbidden with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationForbidden() *NotificationProductOfferingQualificationStateChangeNotificationForbidden {

	return &NotificationProductOfferingQualificationStateChangeNotificationForbidden{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification forbidden response
func (o *NotificationProductOfferingQualificationStateChangeNotificationForbidden) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification forbidden response
func (o *NotificationProductOfferingQualificationStateChangeNotificationForbidden) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationNotFoundCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationNotFound
const NotificationProductOfferingQualificationStateChangeNotificationNotFoundCode int = 404

/*NotificationProductOfferingQualificationStateChangeNotificationNotFound Not Found

List of supported error codes:
- 60: Resource not found

swagger:response notificationProductOfferingQualificationStateChangeNotificationNotFound
*/
type NotificationProductOfferingQualificationStateChangeNotificationNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationNotFound creates NotificationProductOfferingQualificationStateChangeNotificationNotFound with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationNotFound() *NotificationProductOfferingQualificationStateChangeNotificationNotFound {

	return &NotificationProductOfferingQualificationStateChangeNotificationNotFound{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification not found response
func (o *NotificationProductOfferingQualificationStateChangeNotificationNotFound) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification not found response
func (o *NotificationProductOfferingQualificationStateChangeNotificationNotFound) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationRequestTimeoutCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout
const NotificationProductOfferingQualificationStateChangeNotificationRequestTimeoutCode int = 408

/*NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout Request Time-out

List of supported error codes:
- 63: Request time-out

swagger:response notificationProductOfferingQualificationStateChangeNotificationRequestTimeout
*/
type NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationRequestTimeout creates NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationRequestTimeout() *NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout {

	return &NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification request timeout response
func (o *NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification request timeout response
func (o *NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntityCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity
const NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntityCode int = 422

/*NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity Unprocessable entity

Functional error

swagger:response notificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity
*/
type NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity creates NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity() *NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity {

	return &NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification unprocessable entity response
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification unprocessable entity response
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailableCode is the HTTP code returned for type NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable
const NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailableCode int = 503

/*NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable Service Unavailable



swagger:response notificationProductOfferingQualificationStateChangeNotificationServiceUnavailable
*/
type NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewNotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable creates NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable with default headers values
func NewNotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable() *NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable {

	return &NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable{}
}

// WithPayload adds the payload to the notification product offering qualification state change notification service unavailable response
func (o *NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable) WithPayload(payload *models.ErrorRepresentation) *NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification product offering qualification state change notification service unavailable response
func (o *NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationProductOfferingQualificationStateChangeNotificationServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
