// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOrderRefCancel A reference to a product order used to perform cancellation request.
//
// swagger:model ProductOrderRefCancel
type ProductOrderRefCancel struct {

	// Technical attribute to extend the API
	AtReferredType string `json:"@referredType,omitempty"`

	// A number that uniquely identifies an order within the buyer's enterprise.
	// Must be provided if provided when the order was initially accepted
	ExternalID string `json:"externalId,omitempty"`

	// Hyperlink to access the order
	Href string `json:"href,omitempty"`

	// Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.
	// Required: true
	ID *string `json:"id"`

	// state
	State ProductOrderStateType `json:"state,omitempty"`

	// The version number that the Buyer uses to refer to this particular version of the order.
	// This not checked for conformance (informative information)
	Version string `json:"version,omitempty"`
}

// Validate validates this product order ref cancel
func (m *ProductOrderRefCancel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOrderRefCancel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderRefCancel) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOrderRefCancel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOrderRefCancel) UnmarshalBinary(b []byte) error {
	var res ProductOrderRefCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
