// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOrderCreate A CreateProductOrder object is provided as input to the product order create operation.
//
// swagger:model ProductOrder_Create
type ProductOrderCreate struct {

	// Technical attribute to extend API
	AtBaseType string `json:"@baseType,omitempty"`

	// Technical attribute to extend API
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Technical attribute to extend API
	AtType string `json:"@type,omitempty"`

	// billing account
	BillingAccount *BillingAccountRef `json:"billingAccount,omitempty"`

	// Billing type.
	BillingType string `json:"billingType,omitempty"`

	// Date when the order was submitted by the Buyer to the Seller
	// Required: true
	// Format: date-time
	BuyerRequestDate *strfmt.DateTime `json:"buyerRequestDate,omitempty"`

	// desired response
	// Required: true
	DesiredResponse DesiredOrderResponses `json:"desiredResponse,omitempty"`

	// Indicates that expedited treatment is requested and any charges generated in provisioning this request (e.g., additional engineering charges or labor charges if applicable) will be accepted by the buyer.
	ExpeditePriority bool `json:"expeditePriority,omitempty"`

	// Buyer Purchase Order Number: A number that uniquely identifies an order within the Buyer's enterprise
	// Required: true
	ExternalID *string `json:"externalId,omitempty"`

	// note
	Note []*Note `json:"note,omitempty"`

	// order activity
	// Required: true
	OrderActivity OrderActivity `json:"orderActivity"`

	// order item
	// Required: true
	// Min Items: 1
	OrderItem []*ProductOrderItemCreate `json:"orderItem"`

	// Buyer Order Version: The version number that the Buyer uses to refer to this particular version of the order.
	// Required: true
	OrderVersion *string `json:"orderVersion,omitempty"`

	// Payment type.
	PaymentType string `json:"paymentType,omitempty"`

	// pricing method
	PricingMethod PricingMethod `json:"pricingMethod,omitempty"`

	// The identifier references the previously agreed upon pricing terms, as applicable, based on the pricingMethod (e.g. a contract id or tariff id.
	PricingReference string `json:"pricingReference,omitempty"`

	// The length of the contract in months
	PricingTerm int32 `json:"pricingTerm,omitempty"`

	// An integer that specifies that expedited treatment is to be provided in a specific priority.
	Priority int32 `json:"priority,omitempty"`

	// An identifier that is used to group Orders that is important to the Buyer. A ProjectId can be used to relate multiple Orders together.
	ProjectID string `json:"projectId,omitempty"`

	// Related Buyer Purchase Order Number (RPON) - Identifies the Buyer Purchase Order Number that is related to this order.
	RelatedBuyerPON string `json:"relatedBuyerPON,omitempty"`

	// related party
	// Required: true
	RelatedParty []*RelatedParty `json:"relatedParty,omitempty"`

	// Identifies the Buyer's desired due date (requested delivery date)
	// Required: true
	// Format: date-time
	RequestedCompletionDate *strfmt.DateTime `json:"requestedCompletionDate,omitempty"`

	// If specified, identifies the Buyer's desired date for order processing to start
	// Format: date-time
	RequestedStartDate strfmt.DateTime `json:"requestedStartDate,omitempty"`

	// Within the United States, indicates the provisioning and restoration priority as defined under the TSP Service Vendor Handbook.
	TspRestorationPriority string `json:"tspRestorationPriority,omitempty"`
}

// Validate validates this product order create
func (m *ProductOrderCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerRequestDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOrderCreate) validateBillingAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAccount) { // not required
		return nil
	}

	if m.BillingAccount != nil {
		if err := m.BillingAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ProductOrderCreate) validateBuyerRequestDate(formats strfmt.Registry) error {

	if err := validate.Required("buyerRequestDate", "body", m.BuyerRequestDate); err != nil {
		return err
	}

	if err := validate.FormatOf("buyerRequestDate", "body", "date-time", m.BuyerRequestDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateDesiredResponse(formats strfmt.Registry) error {

	if err := m.DesiredResponse.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("desiredResponse")
		}
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateNote(formats strfmt.Registry) error {

	if swag.IsZero(m.Note) { // not required
		return nil
	}

	for i := 0; i < len(m.Note); i++ {
		if swag.IsZero(m.Note[i]) { // not required
			continue
		}

		if m.Note[i] != nil {
			if err := m.Note[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrderCreate) validateOrderActivity(formats strfmt.Registry) error {

	if err := m.OrderActivity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderActivity")
		}
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateOrderItem(formats strfmt.Registry) error {

	if err := validate.Required("orderItem", "body", m.OrderItem); err != nil {
		return err
	}

	iOrderItemSize := int64(len(m.OrderItem))

	if err := validate.MinItems("orderItem", "body", iOrderItemSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OrderItem); i++ {
		if swag.IsZero(m.OrderItem[i]) { // not required
			continue
		}

		if m.OrderItem[i] != nil {
			if err := m.OrderItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrderCreate) validateOrderVersion(formats strfmt.Registry) error {

	if err := validate.Required("orderVersion", "body", m.OrderVersion); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validatePricingMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PricingMethod) { // not required
		return nil
	}

	if err := m.PricingMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pricingMethod")
		}
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateRelatedParty(formats strfmt.Registry) error {

	if err := validate.Required("relatedParty", "body", m.RelatedParty); err != nil {
		return err
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrderCreate) validateRequestedCompletionDate(formats strfmt.Registry) error {

	if err := validate.Required("requestedCompletionDate", "body", m.RequestedCompletionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("requestedCompletionDate", "body", "date-time", m.RequestedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderCreate) validateRequestedStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedStartDate", "body", "date-time", m.RequestedStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOrderCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOrderCreate) UnmarshalBinary(b []byte) error {
	var res ProductOrderCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
