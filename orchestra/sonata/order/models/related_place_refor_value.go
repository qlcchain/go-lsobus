// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RelatedPlaceReforValue Place defines the places where the ordered products are sold or delivered.
// This is an abstract class that allow to define a role for a defined location structure: fielded address, formatted address, geocode, service site or references address.
// This class features also site information attributes valued bu the buyer and used by the seller in the site resource.
//
// swagger:discriminator RelatedPlaceReforValue @type
type RelatedPlaceReforValue interface {
	runtime.Validatable

	// The type to which the place is referring. This may be "Site", "FormattedAddress", "FieldedAddress", "ReferencedAddress", or "GeographicLocation
	AtType() string
	SetAtType(string)

	// Additional information about the Site.
	AdditionalSiteInformation() string
	SetAdditionalSiteInformation(string)

	// Reference link to the place
	Href() string
	SetHref(string)

	// Unique identifier of the place.
	ID() string
	SetID(string)

	// The role that the place plays, e.g. "UNI Site", or "ENNI Site".
	// Required: true
	Role() *string
	SetRole(*string)

	// The name of the company that is the administrative authority (e.g. controls access) for this Service Site. (For example, the building owner).
	SiteCompanyName() string
	SetSiteCompanyName(string)

	// The name of the company that is the administrative authority for the space within this Service Site. (For example, the company leasing space in a multi-tenant building).
	SiteCustomerName() string
	SetSiteCustomerName(string)

	// A textual description of the Service Site.
	SiteDescription() string
	SetSiteDescription(string)

	// A name commonly used by people to refer to this Service Site.
	SiteName() string
	SetSiteName(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type relatedPlaceReforValue struct {
	atTypeField string

	additionalSiteInformationField string

	hrefField string

	idField string

	roleField *string

	siteCompanyNameField string

	siteCustomerNameField string

	siteDescriptionField string

	siteNameField string
}

// AtType gets the at type of this polymorphic type
func (m *relatedPlaceReforValue) AtType() string {
	return "RelatedPlaceReforValue"
}

// SetAtType sets the at type of this polymorphic type
func (m *relatedPlaceReforValue) SetAtType(val string) {
}

// AdditionalSiteInformation gets the additional site information of this polymorphic type
func (m *relatedPlaceReforValue) AdditionalSiteInformation() string {
	return m.additionalSiteInformationField
}

// SetAdditionalSiteInformation sets the additional site information of this polymorphic type
func (m *relatedPlaceReforValue) SetAdditionalSiteInformation(val string) {
	m.additionalSiteInformationField = val
}

// Href gets the href of this polymorphic type
func (m *relatedPlaceReforValue) Href() string {
	return m.hrefField
}

// SetHref sets the href of this polymorphic type
func (m *relatedPlaceReforValue) SetHref(val string) {
	m.hrefField = val
}

// ID gets the id of this polymorphic type
func (m *relatedPlaceReforValue) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *relatedPlaceReforValue) SetID(val string) {
	m.idField = val
}

// Role gets the role of this polymorphic type
func (m *relatedPlaceReforValue) Role() *string {
	return m.roleField
}

// SetRole sets the role of this polymorphic type
func (m *relatedPlaceReforValue) SetRole(val *string) {
	m.roleField = val
}

// SiteCompanyName gets the site company name of this polymorphic type
func (m *relatedPlaceReforValue) SiteCompanyName() string {
	return m.siteCompanyNameField
}

// SetSiteCompanyName sets the site company name of this polymorphic type
func (m *relatedPlaceReforValue) SetSiteCompanyName(val string) {
	m.siteCompanyNameField = val
}

// SiteCustomerName gets the site customer name of this polymorphic type
func (m *relatedPlaceReforValue) SiteCustomerName() string {
	return m.siteCustomerNameField
}

// SetSiteCustomerName sets the site customer name of this polymorphic type
func (m *relatedPlaceReforValue) SetSiteCustomerName(val string) {
	m.siteCustomerNameField = val
}

// SiteDescription gets the site description of this polymorphic type
func (m *relatedPlaceReforValue) SiteDescription() string {
	return m.siteDescriptionField
}

// SetSiteDescription sets the site description of this polymorphic type
func (m *relatedPlaceReforValue) SetSiteDescription(val string) {
	m.siteDescriptionField = val
}

// SiteName gets the site name of this polymorphic type
func (m *relatedPlaceReforValue) SiteName() string {
	return m.siteNameField
}

// SetSiteName sets the site name of this polymorphic type
func (m *relatedPlaceReforValue) SetSiteName(val string) {
	m.siteNameField = val
}

// UnmarshalRelatedPlaceReforValueSlice unmarshals polymorphic slices of RelatedPlaceReforValue
func UnmarshalRelatedPlaceReforValueSlice(reader io.Reader, consumer runtime.Consumer) ([]RelatedPlaceReforValue, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []RelatedPlaceReforValue
	for _, element := range elements {
		obj, err := unmarshalRelatedPlaceReforValue(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalRelatedPlaceReforValue unmarshals polymorphic RelatedPlaceReforValue
func UnmarshalRelatedPlaceReforValue(reader io.Reader, consumer runtime.Consumer) (RelatedPlaceReforValue, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalRelatedPlaceReforValue(data, consumer)
}

func unmarshalRelatedPlaceReforValue(data []byte, consumer runtime.Consumer) (RelatedPlaceReforValue, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the @type property.
	var getType struct {
		AtType string `json:"@type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("@type", "body", getType.AtType); err != nil {
		return nil, err
	}

	// The value of @type is used to determine which type to create and unmarshal the data into
	switch getType.AtType {
	case "FieldedAddress":
		var result FieldedAddress
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "FormattedAddress":
		var result FormattedAddress
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "GeographicLocation":
		var result GeographicLocation
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "GeographicSite":
		var result GeographicSite
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ReferencedAddress":
		var result ReferencedAddress
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RelatedPlaceReforValue":
		var result relatedPlaceReforValue
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid @type value: %q", getType.AtType)
}

// Validate validates this related place refor value
func (m *relatedPlaceReforValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *relatedPlaceReforValue) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role()); err != nil {
		return err
	}

	return nil
}
