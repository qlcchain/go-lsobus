// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GeographicSite A fixed physical location at which a Product can be installed.
//
// swagger:model GeographicSite
type GeographicSite struct {
	additionalSiteInformationField string

	hrefField string

	idField string

	roleField *string

	siteCompanyNameField string

	siteCustomerNameField string

	siteDescriptionField string

	siteNameField string

	GeographicSiteAllOf1
}

// AtType gets the at type of this subtype
func (m *GeographicSite) AtType() string {
	return "GeographicSite"
}

// SetAtType sets the at type of this subtype
func (m *GeographicSite) SetAtType(val string) {
}

// AdditionalSiteInformation gets the additional site information of this subtype
func (m *GeographicSite) AdditionalSiteInformation() string {
	return m.additionalSiteInformationField
}

// SetAdditionalSiteInformation sets the additional site information of this subtype
func (m *GeographicSite) SetAdditionalSiteInformation(val string) {
	m.additionalSiteInformationField = val
}

// Href gets the href of this subtype
func (m *GeographicSite) Href() string {
	return m.hrefField
}

// SetHref sets the href of this subtype
func (m *GeographicSite) SetHref(val string) {
	m.hrefField = val
}

// ID gets the id of this subtype
func (m *GeographicSite) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *GeographicSite) SetID(val string) {
	m.idField = val
}

// Role gets the role of this subtype
func (m *GeographicSite) Role() *string {
	return m.roleField
}

// SetRole sets the role of this subtype
func (m *GeographicSite) SetRole(val *string) {
	m.roleField = val
}

// SiteCompanyName gets the site company name of this subtype
func (m *GeographicSite) SiteCompanyName() string {
	return m.siteCompanyNameField
}

// SetSiteCompanyName sets the site company name of this subtype
func (m *GeographicSite) SetSiteCompanyName(val string) {
	m.siteCompanyNameField = val
}

// SiteCustomerName gets the site customer name of this subtype
func (m *GeographicSite) SiteCustomerName() string {
	return m.siteCustomerNameField
}

// SetSiteCustomerName sets the site customer name of this subtype
func (m *GeographicSite) SetSiteCustomerName(val string) {
	m.siteCustomerNameField = val
}

// SiteDescription gets the site description of this subtype
func (m *GeographicSite) SiteDescription() string {
	return m.siteDescriptionField
}

// SetSiteDescription sets the site description of this subtype
func (m *GeographicSite) SetSiteDescription(val string) {
	m.siteDescriptionField = val
}

// SiteName gets the site name of this subtype
func (m *GeographicSite) SiteName() string {
	return m.siteNameField
}

// SetSiteName sets the site name of this subtype
func (m *GeographicSite) SetSiteName(val string) {
	m.siteNameField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *GeographicSite) UnmarshalJSON(raw []byte) error {
	var data struct {
		GeographicSiteAllOf1
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		AtType string `json:"@type,omitempty"`

		AdditionalSiteInformation string `json:"additionalSiteInformation,omitempty"`

		Href string `json:"href,omitempty"`

		ID string `json:"id,omitempty"`

		Role *string `json:"role"`

		SiteCompanyName string `json:"siteCompanyName,omitempty"`

		SiteCustomerName string `json:"siteCustomerName,omitempty"`

		SiteDescription string `json:"siteDescription,omitempty"`

		SiteName string `json:"siteName,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result GeographicSite

	if base.AtType != result.AtType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid @type value: %q", base.AtType)
	}
	result.additionalSiteInformationField = base.AdditionalSiteInformation

	result.hrefField = base.Href

	result.idField = base.ID

	result.roleField = base.Role

	result.siteCompanyNameField = base.SiteCompanyName

	result.siteCustomerNameField = base.SiteCustomerName

	result.siteDescriptionField = base.SiteDescription

	result.siteNameField = base.SiteName

	result.GeographicSiteAllOf1 = data.GeographicSiteAllOf1

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m GeographicSite) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		GeographicSiteAllOf1
	}{

		GeographicSiteAllOf1: m.GeographicSiteAllOf1,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		AtType string `json:"@type,omitempty"`

		AdditionalSiteInformation string `json:"additionalSiteInformation,omitempty"`

		Href string `json:"href,omitempty"`

		ID string `json:"id,omitempty"`

		Role *string `json:"role"`

		SiteCompanyName string `json:"siteCompanyName,omitempty"`

		SiteCustomerName string `json:"siteCustomerName,omitempty"`

		SiteDescription string `json:"siteDescription,omitempty"`

		SiteName string `json:"siteName,omitempty"`
	}{

		AtType: m.AtType(),

		AdditionalSiteInformation: m.AdditionalSiteInformation(),

		Href: m.Href(),

		ID: m.ID(),

		Role: m.Role(),

		SiteCompanyName: m.SiteCompanyName(),

		SiteCustomerName: m.SiteCustomerName(),

		SiteDescription: m.SiteDescription(),

		SiteName: m.SiteName(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this geographic site
func (m *GeographicSite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with GeographicSiteAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeographicSite) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeographicSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeographicSite) UnmarshalBinary(b []byte) error {
	var res GeographicSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GeographicSiteAllOf1 geographic site all of1
//
// swagger:model GeographicSiteAllOf1
type GeographicSiteAllOf1 interface{}
