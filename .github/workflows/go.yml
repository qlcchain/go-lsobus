name: Main workflow
on: [push]
jobs:

  build:
    name: Check, Build and Publish snapshot artifacts 
    runs-on: ubuntu-18.04
    if: contains(github.event.head_commit.message, '[skip ci]') == false && contains(github.event.head_commit.message, '[ci skip]') == false
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - uses: actions/cache@v2.1.5
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check code style and calculate coverage
        env:
          GO111MODULE: on
        run: |
          if [[ -n "$(gofmt -l .| grep -v ^vendor/)" ]]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi
          go vet `go list ./... | egrep -v "platform"`
          go vet -v `go list ./... | egrep -v "platform"`
          make clean build

#      - uses: codecov/codecov-action@v1.0.2
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: ./coverage.txt
#          flags: unittests
#          name: codecov-umbrella
#        if: success()
        
      - name: Build and Publish the Docker image to DockerHub
        # uses: gythialy/Publish-Docker-Github-Action@2.4
        uses: docker://goreng/publish-docker-github-action:v2.4
        with:
          name: qlcchain/go-lsobus
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile

      - name: Build snapshot
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          make snapshot
          mkdir -p artifact && cp dist/*.{tar.gz,zip,txt,sig} artifact/

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v2.2.3
        with:
          name: go-lsobus-artifact
          path: artifact/
