// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtoOrderInfo proto order info
//
// swagger:model protoOrderInfo
type ProtoOrderInfo struct {

	// buyer
	Buyer *ProtoUser `json:"buyer,omitempty"`

	// connections
	Connections []*ProtoConnectionParam `json:"connections"`

	// contract state
	ContractState string `json:"contractState,omitempty"`

	// order Id
	OrderID string `json:"orderId,omitempty"`

	// order state
	OrderState string `json:"orderState,omitempty"`

	// order type
	OrderType string `json:"orderType,omitempty"`

	// seller
	Seller *ProtoUser `json:"seller,omitempty"`

	// track
	Track []*ProtoOrderLifeTrack `json:"track"`
}

// Validate validates this proto order info
func (m *ProtoOrderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtoOrderInfo) validateBuyer(formats strfmt.Registry) error {

	if swag.IsZero(m.Buyer) { // not required
		return nil
	}

	if m.Buyer != nil {
		if err := m.Buyer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyer")
			}
			return err
		}
	}

	return nil
}

func (m *ProtoOrderInfo) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtoOrderInfo) validateSeller(formats strfmt.Registry) error {

	if swag.IsZero(m.Seller) { // not required
		return nil
	}

	if m.Seller != nil {
		if err := m.Seller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seller")
			}
			return err
		}
	}

	return nil
}

func (m *ProtoOrderInfo) validateTrack(formats strfmt.Registry) error {

	if swag.IsZero(m.Track) { // not required
		return nil
	}

	for i := 0; i < len(m.Track); i++ {
		if swag.IsZero(m.Track[i]) { // not required
			continue
		}

		if m.Track[i] != nil {
			if err := m.Track[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("track" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtoOrderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtoOrderInfo) UnmarshalBinary(b []byte) error {
	var res ProtoOrderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
