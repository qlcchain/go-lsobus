// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOfferingQualification A grouping of POQ Items formulated into a request made by a Buyer to a Seller
//
// swagger:model ProductOfferingQualification
type ProductOfferingQualification struct {

	// Technical attribute to extend the class
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	AtType string `json:"@type,omitempty"`

	// Effective date seller provides qualification result.
	// Format: date-time
	EffectiveQualificationCompletionDate strfmt.DateTime `json:"effectiveQualificationCompletionDate,omitempty"`

	// The date the seller is expected to provide qualification result.
	// Format: date-time
	ExpectedResponseDate strfmt.DateTime `json:"expectedResponseDate,omitempty"`

	// Link to this POQ resource
	Href string `json:"href,omitempty"`

	// The Serviceability Request's unique identifier.
	// Required: true
	ID *string `json:"id"`

	// If this flag is set to Yes, Buyer requests to have instant qualificationto be provided in operation POST response
	InstantSyncQualification *bool `json:"instantSyncQualification,omitempty"`

	// product offering qualification item
	// Required: true
	// Min Items: 1
	ProductOfferingQualificationItem []*ProductOfferingQualificationItem `json:"productOfferingQualificationItem"`

	// This value MAY be assigned by the Buyer/Seller to identify a project the serviceability request is associated with.
	ProjectID string `json:"projectId,omitempty"`

	// This Boolean allows requester (buyer) to indicate if he is willing to get alternate proposal if requested product not available.
	ProvideAlternative bool `json:"provideAlternative,omitempty"`

	// related party
	// Required: true
	RelatedParty []*RelatedParty `json:"relatedParty"`

	// Corresponds to desiredResponseDate - The date a response for the service request is desired.
	// Format: date-time
	RequestedResponseDate strfmt.DateTime `json:"requestedResponseDate,omitempty"`

	// state
	// Required: true
	State ProductOfferingQualificationStateType `json:"state"`

	// state change
	StateChange []*StateChange `json:"stateChange"`
}

// Validate validates this product offering qualification
func (m *ProductOfferingQualification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveQualificationCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedResponseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOfferingQualificationItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedResponseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOfferingQualification) validateEffectiveQualificationCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveQualificationCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveQualificationCompletionDate", "body", "date-time", m.EffectiveQualificationCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualification) validateExpectedResponseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedResponseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedResponseDate", "body", "date-time", m.ExpectedResponseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualification) validateProductOfferingQualificationItem(formats strfmt.Registry) error {

	if err := validate.Required("productOfferingQualificationItem", "body", m.ProductOfferingQualificationItem); err != nil {
		return err
	}

	iProductOfferingQualificationItemSize := int64(len(m.ProductOfferingQualificationItem))

	if err := validate.MinItems("productOfferingQualificationItem", "body", iProductOfferingQualificationItemSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ProductOfferingQualificationItem); i++ {
		if swag.IsZero(m.ProductOfferingQualificationItem[i]) { // not required
			continue
		}

		if m.ProductOfferingQualificationItem[i] != nil {
			if err := m.ProductOfferingQualificationItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("productOfferingQualificationItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOfferingQualification) validateRelatedParty(formats strfmt.Registry) error {

	if err := validate.Required("relatedParty", "body", m.RelatedParty); err != nil {
		return err
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOfferingQualification) validateRequestedResponseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedResponseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedResponseDate", "body", "date-time", m.RequestedResponseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualification) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *ProductOfferingQualification) validateStateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChange) { // not required
		return nil
	}

	for i := 0; i < len(m.StateChange); i++ {
		if swag.IsZero(m.StateChange[i]) { // not required
			continue
		}

		if m.StateChange[i] != nil {
			if err := m.StateChange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stateChange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOfferingQualification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOfferingQualification) UnmarshalBinary(b []byte) error {
	var res ProductOfferingQualification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
