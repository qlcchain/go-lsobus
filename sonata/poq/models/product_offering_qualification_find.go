// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOfferingQualificationFind This class is used to describe attribute to be used for requesting POQ list (used in the GET by list)
//
// swagger:model ProductOfferingQualification_Find
type ProductOfferingQualificationFind struct {

	// The Serviceability Request's unique identifier.
	ID string `json:"id,omitempty"`

	// This value MAY be assigned by the Buyer/Seller to identify a project the serviceability request is associated with.
	ProjectID string `json:"projectId,omitempty"`

	// Corresponds to desiredResponseDate - The date a response for the service request is desired.
	// Format: date
	RequestedResponseDate strfmt.Date `json:"requestedResponseDate,omitempty"`

	// state
	State ProductOfferingQualificationStateType `json:"state,omitempty"`
}

// Validate validates this product offering qualification find
func (m *ProductOfferingQualificationFind) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestedResponseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOfferingQualificationFind) validateRequestedResponseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedResponseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedResponseDate", "body", "date", m.RequestedResponseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOfferingQualificationFind) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOfferingQualificationFind) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOfferingQualificationFind) UnmarshalBinary(b []byte) error {
	var res ProductOfferingQualificationFind
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
