// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProductOfferingQualificationStateType These values represent the valid states through which the product offering qualification can transition
//
// swagger:model ProductOfferingQualificationStateType
type ProductOfferingQualificationStateType string

const (

	// ProductOfferingQualificationStateTypeDone captures enum value "done"
	ProductOfferingQualificationStateTypeDone ProductOfferingQualificationStateType = "done"

	// ProductOfferingQualificationStateTypeTerminatedWithErrorUnableToProvide captures enum value "terminatedWithError.unableToProvide"
	ProductOfferingQualificationStateTypeTerminatedWithErrorUnableToProvide ProductOfferingQualificationStateType = "terminatedWithError.unableToProvide"

	// ProductOfferingQualificationStateTypeTerminatedWithErrorInsufficientInformationProvided captures enum value "terminatedWithError.insufficientInformationProvided"
	ProductOfferingQualificationStateTypeTerminatedWithErrorInsufficientInformationProvided ProductOfferingQualificationStateType = "terminatedWithError.insufficientInformationProvided"

	// ProductOfferingQualificationStateTypeInProgress captures enum value "inProgress"
	ProductOfferingQualificationStateTypeInProgress ProductOfferingQualificationStateType = "inProgress"
)

// for schema
var productOfferingQualificationStateTypeEnum []interface{}

func init() {
	var res []ProductOfferingQualificationStateType
	if err := json.Unmarshal([]byte(`["done","terminatedWithError.unableToProvide","terminatedWithError.insufficientInformationProvided","inProgress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productOfferingQualificationStateTypeEnum = append(productOfferingQualificationStateTypeEnum, v)
	}
}

func (m ProductOfferingQualificationStateType) validateProductOfferingQualificationStateTypeEnum(path, location string, value ProductOfferingQualificationStateType) error {
	if err := validate.Enum(path, location, value, productOfferingQualificationStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this product offering qualification state type
func (m ProductOfferingQualificationStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProductOfferingQualificationStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
