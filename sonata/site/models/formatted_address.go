// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormattedAddress A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.
//
// swagger:model FormattedAddress
type FormattedAddress struct {

	// The first address line in a formatted address
	// Required: true
	AddrLine1 *string `json:"addrLine1"`

	// The second address line in a formatted address
	AddrLine2 string `json:"addrLine2,omitempty"`

	// The city that the address is in
	// Required: true
	City *string `json:"city"`

	// Country that the address is in
	// Required: true
	Country *string `json:"country"`

	// id of the formatted address
	ID string `json:"id,omitempty"`

	// An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature
	Locality string `json:"locality,omitempty"`

	// Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as ZIP code)
	// Required: true
	Postcode *string `json:"postcode"`

	// An extension of a postal code. E.g. the part following the dash in an American urban property address
	PostcodeExtension string `json:"postcodeExtension,omitempty"`

	// The State or Province that the address is in
	// Required: true
	StateOrProvince *string `json:"stateOrProvince"`
}

// Validate validates this formatted address
func (m *FormattedAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddrLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormattedAddress) validateAddrLine1(formats strfmt.Registry) error {

	if err := validate.Required("addrLine1", "body", m.AddrLine1); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateStateOrProvince(formats strfmt.Registry) error {

	if err := validate.Required("stateOrProvince", "body", m.StateOrProvince); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormattedAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormattedAddress) UnmarshalBinary(b []byte) error {
	var res FormattedAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
