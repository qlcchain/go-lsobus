// Code generated by go-swagger; DO NOT EDIT.

package geographic_site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/iixlabs/virtual-lsobus/sonata/site/models"
)

// GeographicSiteFindReader is a Reader for the GeographicSiteFind structure.
type GeographicSiteFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GeographicSiteFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGeographicSiteFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGeographicSiteFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGeographicSiteFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGeographicSiteFindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGeographicSiteFindRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGeographicSiteFindUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGeographicSiteFindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGeographicSiteFindServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGeographicSiteFindOK creates a GeographicSiteFindOK with default headers values
func NewGeographicSiteFindOK() *GeographicSiteFindOK {
	return &GeographicSiteFindOK{}
}

/*GeographicSiteFindOK handles this case with default header values.

Ok
*/
type GeographicSiteFindOK struct {
	Payload []*models.GeographicSiteFindResp
}

func (o *GeographicSiteFindOK) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindOK  %+v", 200, o.Payload)
}

func (o *GeographicSiteFindOK) GetPayload() []*models.GeographicSiteFindResp {
	return o.Payload
}

func (o *GeographicSiteFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindBadRequest creates a GeographicSiteFindBadRequest with default headers values
func NewGeographicSiteFindBadRequest() *GeographicSiteFindBadRequest {
	return &GeographicSiteFindBadRequest{}
}

/*GeographicSiteFindBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type GeographicSiteFindBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindBadRequest) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindBadRequest  %+v", 400, o.Payload)
}

func (o *GeographicSiteFindBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindUnauthorized creates a GeographicSiteFindUnauthorized with default headers values
func NewGeographicSiteFindUnauthorized() *GeographicSiteFindUnauthorized {
	return &GeographicSiteFindUnauthorized{}
}

/*GeographicSiteFindUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type GeographicSiteFindUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindUnauthorized) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindUnauthorized  %+v", 401, o.Payload)
}

func (o *GeographicSiteFindUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindNotFound creates a GeographicSiteFindNotFound with default headers values
func NewGeographicSiteFindNotFound() *GeographicSiteFindNotFound {
	return &GeographicSiteFindNotFound{}
}

/*GeographicSiteFindNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type GeographicSiteFindNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindNotFound) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindNotFound  %+v", 404, o.Payload)
}

func (o *GeographicSiteFindNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindRequestTimeout creates a GeographicSiteFindRequestTimeout with default headers values
func NewGeographicSiteFindRequestTimeout() *GeographicSiteFindRequestTimeout {
	return &GeographicSiteFindRequestTimeout{}
}

/*GeographicSiteFindRequestTimeout handles this case with default header values.

Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type GeographicSiteFindRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindRequestTimeout  %+v", 408, o.Payload)
}

func (o *GeographicSiteFindRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindUnprocessableEntity creates a GeographicSiteFindUnprocessableEntity with default headers values
func NewGeographicSiteFindUnprocessableEntity() *GeographicSiteFindUnprocessableEntity {
	return &GeographicSiteFindUnprocessableEntity{}
}

/*GeographicSiteFindUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error





 - code: 100
message: Too many records retrieved - please restrict requested parameter value(s)
description:
*/
type GeographicSiteFindUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GeographicSiteFindUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindInternalServerError creates a GeographicSiteFindInternalServerError with default headers values
func NewGeographicSiteFindInternalServerError() *GeographicSiteFindInternalServerError {
	return &GeographicSiteFindInternalServerError{}
}

/*GeographicSiteFindInternalServerError handles this case with default header values.

Internal Server Error

List of supported error codes:
- 1: Internal error
*/
type GeographicSiteFindInternalServerError struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindInternalServerError) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindInternalServerError  %+v", 500, o.Payload)
}

func (o *GeographicSiteFindInternalServerError) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeographicSiteFindServiceUnavailable creates a GeographicSiteFindServiceUnavailable with default headers values
func NewGeographicSiteFindServiceUnavailable() *GeographicSiteFindServiceUnavailable {
	return &GeographicSiteFindServiceUnavailable{}
}

/*GeographicSiteFindServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type GeographicSiteFindServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *GeographicSiteFindServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /geographicSite][%d] geographicSiteFindServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GeographicSiteFindServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *GeographicSiteFindServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
