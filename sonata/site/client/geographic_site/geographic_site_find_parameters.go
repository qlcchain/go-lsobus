// Code generated by go-swagger; DO NOT EDIT.

package geographic_site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGeographicSiteFindParams creates a new GeographicSiteFindParams object
// with the default values initialized.
func NewGeographicSiteFindParams() *GeographicSiteFindParams {
	var ()
	return &GeographicSiteFindParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGeographicSiteFindParamsWithTimeout creates a new GeographicSiteFindParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGeographicSiteFindParamsWithTimeout(timeout time.Duration) *GeographicSiteFindParams {
	var ()
	return &GeographicSiteFindParams{

		timeout: timeout,
	}
}

// NewGeographicSiteFindParamsWithContext creates a new GeographicSiteFindParams object
// with the default values initialized, and the ability to set a context for a request
func NewGeographicSiteFindParamsWithContext(ctx context.Context) *GeographicSiteFindParams {
	var ()
	return &GeographicSiteFindParams{

		Context: ctx,
	}
}

// NewGeographicSiteFindParamsWithHTTPClient creates a new GeographicSiteFindParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGeographicSiteFindParamsWithHTTPClient(client *http.Client) *GeographicSiteFindParams {
	var ()
	return &GeographicSiteFindParams{
		HTTPClient: client,
	}
}

/*GeographicSiteFindParams contains all the parameters to send to the API endpoint
for the geographic site find operation typically these are written to a http.Request
*/
type GeographicSiteFindParams struct {

	/*GeographicAddressCity
	  City of the geographic site address

	*/
	GeographicAddressCity *string
	/*GeographicAddressCountry
	  Country of the geographic site address

	*/
	GeographicAddressCountry *string
	/*GeographicAddressID
	  Identifier of a geographic address (from the seller). It could be any type of address reference (fielded, formatted, referenced, geoCode)

	*/
	GeographicAddressID *string
	/*GeographicAddressPostcode
	  Postcode of the geographic site address

	*/
	GeographicAddressPostcode *string
	/*GeographicAddressStreetName
	  Street Name of the geographic site address

	*/
	GeographicAddressStreetName *string
	/*GeographicAddressStreetNr
	  Street Nr of the geographic site address

	*/
	GeographicAddressStreetNr *string
	/*GeographicAddressStreetType
	  Street Type of the geographic site address

	*/
	GeographicAddressStreetType *string
	/*SiteCompanyName
	  The name of the company that is the administrative authority (e.g. controls access) for this Service Site. (For example, the building owner)

	*/
	SiteCompanyName *string
	/*SiteContactName
	  Identifies the name of the person or organization at the specific site location that is the local contact. This contact will primarily be used for gaining access to the site.
	Filtering is done on the name of the relatedParty which has role ‘Site Contact’ in the Site record.

	*/
	SiteContactName *string
	/*SiteCustomerName
	  The name of the company that is the administrative authority for the space within this Service Site. (For example, the company leasing space in a multi-tenant building).

	*/
	SiteCustomerName *string
	/*SiteDescription
	  A textual description of the Service Site.

	*/
	SiteDescription *string
	/*SiteName
	  A name commonly used by people to refer to this Service Site.

	*/
	SiteName *string
	/*SiteType
	  This defines whether a Service Site is public or private.

	*/
	SiteType *string
	/*Status
	  Status of the site

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the geographic site find params
func (o *GeographicSiteFindParams) WithTimeout(timeout time.Duration) *GeographicSiteFindParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the geographic site find params
func (o *GeographicSiteFindParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the geographic site find params
func (o *GeographicSiteFindParams) WithContext(ctx context.Context) *GeographicSiteFindParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the geographic site find params
func (o *GeographicSiteFindParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the geographic site find params
func (o *GeographicSiteFindParams) WithHTTPClient(client *http.Client) *GeographicSiteFindParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the geographic site find params
func (o *GeographicSiteFindParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGeographicAddressCity adds the geographicAddressCity to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressCity(geographicAddressCity *string) *GeographicSiteFindParams {
	o.SetGeographicAddressCity(geographicAddressCity)
	return o
}

// SetGeographicAddressCity adds the geographicAddressCity to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressCity(geographicAddressCity *string) {
	o.GeographicAddressCity = geographicAddressCity
}

// WithGeographicAddressCountry adds the geographicAddressCountry to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressCountry(geographicAddressCountry *string) *GeographicSiteFindParams {
	o.SetGeographicAddressCountry(geographicAddressCountry)
	return o
}

// SetGeographicAddressCountry adds the geographicAddressCountry to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressCountry(geographicAddressCountry *string) {
	o.GeographicAddressCountry = geographicAddressCountry
}

// WithGeographicAddressID adds the geographicAddressID to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressID(geographicAddressID *string) *GeographicSiteFindParams {
	o.SetGeographicAddressID(geographicAddressID)
	return o
}

// SetGeographicAddressID adds the geographicAddressId to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressID(geographicAddressID *string) {
	o.GeographicAddressID = geographicAddressID
}

// WithGeographicAddressPostcode adds the geographicAddressPostcode to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressPostcode(geographicAddressPostcode *string) *GeographicSiteFindParams {
	o.SetGeographicAddressPostcode(geographicAddressPostcode)
	return o
}

// SetGeographicAddressPostcode adds the geographicAddressPostcode to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressPostcode(geographicAddressPostcode *string) {
	o.GeographicAddressPostcode = geographicAddressPostcode
}

// WithGeographicAddressStreetName adds the geographicAddressStreetName to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressStreetName(geographicAddressStreetName *string) *GeographicSiteFindParams {
	o.SetGeographicAddressStreetName(geographicAddressStreetName)
	return o
}

// SetGeographicAddressStreetName adds the geographicAddressStreetName to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressStreetName(geographicAddressStreetName *string) {
	o.GeographicAddressStreetName = geographicAddressStreetName
}

// WithGeographicAddressStreetNr adds the geographicAddressStreetNr to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressStreetNr(geographicAddressStreetNr *string) *GeographicSiteFindParams {
	o.SetGeographicAddressStreetNr(geographicAddressStreetNr)
	return o
}

// SetGeographicAddressStreetNr adds the geographicAddressStreetNr to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressStreetNr(geographicAddressStreetNr *string) {
	o.GeographicAddressStreetNr = geographicAddressStreetNr
}

// WithGeographicAddressStreetType adds the geographicAddressStreetType to the geographic site find params
func (o *GeographicSiteFindParams) WithGeographicAddressStreetType(geographicAddressStreetType *string) *GeographicSiteFindParams {
	o.SetGeographicAddressStreetType(geographicAddressStreetType)
	return o
}

// SetGeographicAddressStreetType adds the geographicAddressStreetType to the geographic site find params
func (o *GeographicSiteFindParams) SetGeographicAddressStreetType(geographicAddressStreetType *string) {
	o.GeographicAddressStreetType = geographicAddressStreetType
}

// WithSiteCompanyName adds the siteCompanyName to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteCompanyName(siteCompanyName *string) *GeographicSiteFindParams {
	o.SetSiteCompanyName(siteCompanyName)
	return o
}

// SetSiteCompanyName adds the siteCompanyName to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteCompanyName(siteCompanyName *string) {
	o.SiteCompanyName = siteCompanyName
}

// WithSiteContactName adds the siteContactName to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteContactName(siteContactName *string) *GeographicSiteFindParams {
	o.SetSiteContactName(siteContactName)
	return o
}

// SetSiteContactName adds the siteContactName to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteContactName(siteContactName *string) {
	o.SiteContactName = siteContactName
}

// WithSiteCustomerName adds the siteCustomerName to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteCustomerName(siteCustomerName *string) *GeographicSiteFindParams {
	o.SetSiteCustomerName(siteCustomerName)
	return o
}

// SetSiteCustomerName adds the siteCustomerName to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteCustomerName(siteCustomerName *string) {
	o.SiteCustomerName = siteCustomerName
}

// WithSiteDescription adds the siteDescription to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteDescription(siteDescription *string) *GeographicSiteFindParams {
	o.SetSiteDescription(siteDescription)
	return o
}

// SetSiteDescription adds the siteDescription to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteDescription(siteDescription *string) {
	o.SiteDescription = siteDescription
}

// WithSiteName adds the siteName to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteName(siteName *string) *GeographicSiteFindParams {
	o.SetSiteName(siteName)
	return o
}

// SetSiteName adds the siteName to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteName(siteName *string) {
	o.SiteName = siteName
}

// WithSiteType adds the siteType to the geographic site find params
func (o *GeographicSiteFindParams) WithSiteType(siteType *string) *GeographicSiteFindParams {
	o.SetSiteType(siteType)
	return o
}

// SetSiteType adds the siteType to the geographic site find params
func (o *GeographicSiteFindParams) SetSiteType(siteType *string) {
	o.SiteType = siteType
}

// WithStatus adds the status to the geographic site find params
func (o *GeographicSiteFindParams) WithStatus(status *string) *GeographicSiteFindParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the geographic site find params
func (o *GeographicSiteFindParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GeographicSiteFindParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GeographicAddressCity != nil {

		// query param geographicAddress.city
		var qrGeographicAddressCity string
		if o.GeographicAddressCity != nil {
			qrGeographicAddressCity = *o.GeographicAddressCity
		}
		qGeographicAddressCity := qrGeographicAddressCity
		if qGeographicAddressCity != "" {
			if err := r.SetQueryParam("geographicAddress.city", qGeographicAddressCity); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressCountry != nil {

		// query param geographicAddress.country
		var qrGeographicAddressCountry string
		if o.GeographicAddressCountry != nil {
			qrGeographicAddressCountry = *o.GeographicAddressCountry
		}
		qGeographicAddressCountry := qrGeographicAddressCountry
		if qGeographicAddressCountry != "" {
			if err := r.SetQueryParam("geographicAddress.country", qGeographicAddressCountry); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressID != nil {

		// query param geographicAddress.id
		var qrGeographicAddressID string
		if o.GeographicAddressID != nil {
			qrGeographicAddressID = *o.GeographicAddressID
		}
		qGeographicAddressID := qrGeographicAddressID
		if qGeographicAddressID != "" {
			if err := r.SetQueryParam("geographicAddress.id", qGeographicAddressID); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressPostcode != nil {

		// query param geographicAddress.postcode
		var qrGeographicAddressPostcode string
		if o.GeographicAddressPostcode != nil {
			qrGeographicAddressPostcode = *o.GeographicAddressPostcode
		}
		qGeographicAddressPostcode := qrGeographicAddressPostcode
		if qGeographicAddressPostcode != "" {
			if err := r.SetQueryParam("geographicAddress.postcode", qGeographicAddressPostcode); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressStreetName != nil {

		// query param geographicAddress.streetName
		var qrGeographicAddressStreetName string
		if o.GeographicAddressStreetName != nil {
			qrGeographicAddressStreetName = *o.GeographicAddressStreetName
		}
		qGeographicAddressStreetName := qrGeographicAddressStreetName
		if qGeographicAddressStreetName != "" {
			if err := r.SetQueryParam("geographicAddress.streetName", qGeographicAddressStreetName); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressStreetNr != nil {

		// query param geographicAddress.streetNr
		var qrGeographicAddressStreetNr string
		if o.GeographicAddressStreetNr != nil {
			qrGeographicAddressStreetNr = *o.GeographicAddressStreetNr
		}
		qGeographicAddressStreetNr := qrGeographicAddressStreetNr
		if qGeographicAddressStreetNr != "" {
			if err := r.SetQueryParam("geographicAddress.streetNr", qGeographicAddressStreetNr); err != nil {
				return err
			}
		}

	}

	if o.GeographicAddressStreetType != nil {

		// query param geographicAddress.streetType
		var qrGeographicAddressStreetType string
		if o.GeographicAddressStreetType != nil {
			qrGeographicAddressStreetType = *o.GeographicAddressStreetType
		}
		qGeographicAddressStreetType := qrGeographicAddressStreetType
		if qGeographicAddressStreetType != "" {
			if err := r.SetQueryParam("geographicAddress.streetType", qGeographicAddressStreetType); err != nil {
				return err
			}
		}

	}

	if o.SiteCompanyName != nil {

		// query param siteCompanyName
		var qrSiteCompanyName string
		if o.SiteCompanyName != nil {
			qrSiteCompanyName = *o.SiteCompanyName
		}
		qSiteCompanyName := qrSiteCompanyName
		if qSiteCompanyName != "" {
			if err := r.SetQueryParam("siteCompanyName", qSiteCompanyName); err != nil {
				return err
			}
		}

	}

	if o.SiteContactName != nil {

		// query param siteContactName
		var qrSiteContactName string
		if o.SiteContactName != nil {
			qrSiteContactName = *o.SiteContactName
		}
		qSiteContactName := qrSiteContactName
		if qSiteContactName != "" {
			if err := r.SetQueryParam("siteContactName", qSiteContactName); err != nil {
				return err
			}
		}

	}

	if o.SiteCustomerName != nil {

		// query param siteCustomerName
		var qrSiteCustomerName string
		if o.SiteCustomerName != nil {
			qrSiteCustomerName = *o.SiteCustomerName
		}
		qSiteCustomerName := qrSiteCustomerName
		if qSiteCustomerName != "" {
			if err := r.SetQueryParam("siteCustomerName", qSiteCustomerName); err != nil {
				return err
			}
		}

	}

	if o.SiteDescription != nil {

		// query param siteDescription
		var qrSiteDescription string
		if o.SiteDescription != nil {
			qrSiteDescription = *o.SiteDescription
		}
		qSiteDescription := qrSiteDescription
		if qSiteDescription != "" {
			if err := r.SetQueryParam("siteDescription", qSiteDescription); err != nil {
				return err
			}
		}

	}

	if o.SiteName != nil {

		// query param siteName
		var qrSiteName string
		if o.SiteName != nil {
			qrSiteName = *o.SiteName
		}
		qSiteName := qrSiteName
		if qSiteName != "" {
			if err := r.SetQueryParam("siteName", qSiteName); err != nil {
				return err
			}
		}

	}

	if o.SiteType != nil {

		// query param siteType
		var qrSiteType string
		if o.SiteType != nil {
			qrSiteType = *o.SiteType
		}
		qSiteType := qrSiteType
		if qSiteType != "" {
			if err := r.SetQueryParam("siteType", qSiteType); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
