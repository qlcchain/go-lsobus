// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductSummary Class used to provide product overview retrieved in GET (by list) operation
//
// swagger:model ProductSummary
type ProductSummary struct {

	// This identifier is optionally provided during the product ordering and stored for informative purpose in the seller inventory
	BuyerProductID string `json:"buyerProductId,omitempty"`

	// Reference of the product
	Href string `json:"href,omitempty"`

	// Unique identifier of the product
	// Required: true
	ID *string `json:"id"`

	// product offering
	ProductOffering *ProductOfferingRef `json:"productOffering,omitempty"`

	// product specification
	ProductSpecification *ProductSpecificationSummary `json:"productSpecification,omitempty"`

	// product order
	ProductOrder []*ProductOrderRef `json:"productOrder"`

	// The date from which the product starts
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// status
	// Required: true
	Status ProductStatus `json:"status"`
}

// Validate validates this product summary
func (m *ProductSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOffering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductSummary) validateProductOffering(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductOffering) { // not required
		return nil
	}

	if m.ProductOffering != nil {
		if err := m.ProductOffering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productOffering")
			}
			return err
		}
	}

	return nil
}

func (m *ProductSummary) validateProductSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductSpecification) { // not required
		return nil
	}

	if m.ProductSpecification != nil {
		if err := m.ProductSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *ProductSummary) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductSummary) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSummary) UnmarshalBinary(b []byte) error {
	var res ProductSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
