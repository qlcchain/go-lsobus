// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GeographicSite A geographic site related to the product.
//
// swagger:model GeographicSite
type GeographicSite struct {

	// A technical attribute to extend the class. As of now no extension
	// Required: true
	AtType *string `json:"@type"`

	// href of the Site
	Href string `json:"href,omitempty"`

	// Unique identifier of the Site.
	// Required: true
	ID *string `json:"id"`

	// The role that the Site plays, e.g. "Billing Address", "UNI Site", or "ENNI Site".
	// Required: true
	Role *string `json:"role"`

	// Name of the Site
	SiteName string `json:"siteName,omitempty"`
}

// Validate validates this geographic site
func (m *GeographicSite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeographicSite) validateAtType(formats strfmt.Registry) error {

	if err := validate.Required("@type", "body", m.AtType); err != nil {
		return err
	}

	return nil
}

func (m *GeographicSite) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GeographicSite) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GeographicSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeographicSite) UnmarshalBinary(b []byte) error {
	var res GeographicSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
