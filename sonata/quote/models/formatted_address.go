// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormattedAddress A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.
//
// swagger:model FormattedAddress
type FormattedAddress struct {
	hrefField string

	idField string

	roleField *string

	// The first address line in a formatted address
	// Required: true
	AddrLine1 *string `json:"addrLine1"`

	// The second address line in a formatted address
	AddrLine2 string `json:"addrLine2,omitempty"`

	// The city that the address is in
	// Required: true
	City *string `json:"city"`

	// Country that the address is in
	// Required: true
	Country *string `json:"country"`

	// An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature
	Locality string `json:"locality,omitempty"`

	// Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as ZIP code)
	// Required: true
	Postcode *string `json:"postcode"`

	// An extension of a postal code. E.g. the part following the dash in an American urban property address
	PostcodeExtension string `json:"postcodeExtension,omitempty"`

	// The State or Province that the address is in
	// Required: true
	StateOrProvince *string `json:"stateOrProvince"`
}

// AtType gets the at type of this subtype
func (m *FormattedAddress) AtType() string {
	return "FormattedAddress"
}

// SetAtType sets the at type of this subtype
func (m *FormattedAddress) SetAtType(val string) {
}

// Href gets the href of this subtype
func (m *FormattedAddress) Href() string {
	return m.hrefField
}

// SetHref sets the href of this subtype
func (m *FormattedAddress) SetHref(val string) {
	m.hrefField = val
}

// ID gets the id of this subtype
func (m *FormattedAddress) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *FormattedAddress) SetID(val string) {
	m.idField = val
}

// Role gets the role of this subtype
func (m *FormattedAddress) Role() *string {
	return m.roleField
}

// SetRole sets the role of this subtype
func (m *FormattedAddress) SetRole(val *string) {
	m.roleField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *FormattedAddress) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The first address line in a formatted address
		// Required: true
		AddrLine1 *string `json:"addrLine1"`

		// The second address line in a formatted address
		AddrLine2 string `json:"addrLine2,omitempty"`

		// The city that the address is in
		// Required: true
		City *string `json:"city"`

		// Country that the address is in
		// Required: true
		Country *string `json:"country"`

		// An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature
		Locality string `json:"locality,omitempty"`

		// Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as ZIP code)
		// Required: true
		Postcode *string `json:"postcode"`

		// An extension of a postal code. E.g. the part following the dash in an American urban property address
		PostcodeExtension string `json:"postcodeExtension,omitempty"`

		// The State or Province that the address is in
		// Required: true
		StateOrProvince *string `json:"stateOrProvince"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		AtType string `json:"@type,omitempty"`

		Href string `json:"href,omitempty"`

		ID string `json:"id,omitempty"`

		Role *string `json:"role"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result FormattedAddress

	if base.AtType != result.AtType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid @type value: %q", base.AtType)
	}
	result.hrefField = base.Href

	result.idField = base.ID

	result.roleField = base.Role

	result.AddrLine1 = data.AddrLine1
	result.AddrLine2 = data.AddrLine2
	result.City = data.City
	result.Country = data.Country
	result.Locality = data.Locality
	result.Postcode = data.Postcode
	result.PostcodeExtension = data.PostcodeExtension
	result.StateOrProvince = data.StateOrProvince

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m FormattedAddress) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The first address line in a formatted address
		// Required: true
		AddrLine1 *string `json:"addrLine1"`

		// The second address line in a formatted address
		AddrLine2 string `json:"addrLine2,omitempty"`

		// The city that the address is in
		// Required: true
		City *string `json:"city"`

		// Country that the address is in
		// Required: true
		Country *string `json:"country"`

		// An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature
		Locality string `json:"locality,omitempty"`

		// Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as ZIP code)
		// Required: true
		Postcode *string `json:"postcode"`

		// An extension of a postal code. E.g. the part following the dash in an American urban property address
		PostcodeExtension string `json:"postcodeExtension,omitempty"`

		// The State or Province that the address is in
		// Required: true
		StateOrProvince *string `json:"stateOrProvince"`
	}{

		AddrLine1: m.AddrLine1,

		AddrLine2: m.AddrLine2,

		City: m.City,

		Country: m.Country,

		Locality: m.Locality,

		Postcode: m.Postcode,

		PostcodeExtension: m.PostcodeExtension,

		StateOrProvince: m.StateOrProvince,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		AtType string `json:"@type,omitempty"`

		Href string `json:"href,omitempty"`

		ID string `json:"id,omitempty"`

		Role *string `json:"role"`
	}{

		AtType: m.AtType(),

		Href: m.Href(),

		ID: m.ID(),

		Role: m.Role(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this formatted address
func (m *FormattedAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddrLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormattedAddress) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role()); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateAddrLine1(formats strfmt.Registry) error {

	if err := validate.Required("addrLine1", "body", m.AddrLine1); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *FormattedAddress) validateStateOrProvince(formats strfmt.Registry) error {

	if err := validate.Required("stateOrProvince", "body", m.StateOrProvince); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormattedAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormattedAddress) UnmarshalBinary(b []byte) error {
	var res FormattedAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
