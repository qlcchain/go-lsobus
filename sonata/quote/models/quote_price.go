// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotePrice Description of price and discount awarded.
//
// swagger:model QuotePrice
type QuotePrice struct {

	// Indicates the base (class) type of the quote price
	AtType string `json:"@type,omitempty"`

	// Description of the quote/quote item price.
	Description string `json:"description,omitempty"`

	// Name of the quote /quote item price
	// Required: true
	Name *string `json:"name"`

	// price
	// Required: true
	Price *Price `json:"price"`

	// price type
	// Required: true
	PriceType PriceType `json:"priceType"`

	// recurring charge period
	RecurringChargePeriod ChargePeriod `json:"recurringChargePeriod,omitempty"`
}

// Validate validates this quote price
func (m *QuotePrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurringChargePeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotePrice) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *QuotePrice) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *QuotePrice) validatePriceType(formats strfmt.Registry) error {

	if err := m.PriceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priceType")
		}
		return err
	}

	return nil
}

func (m *QuotePrice) validateRecurringChargePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.RecurringChargePeriod) { // not required
		return nil
	}

	if err := m.RecurringChargePeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("recurringChargePeriod")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotePrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotePrice) UnmarshalBinary(b []byte) error {
	var res QuotePrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
