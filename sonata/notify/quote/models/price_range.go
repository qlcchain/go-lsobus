// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PriceRange PriceRange class allows to describe a range of price (Min/Max) for budgetary or indicative quote.
//
// swagger:model PriceRange
type PriceRange struct {

	// max duty free amount
	MaxDutyFreeAmount *Money `json:"maxDutyFreeAmount,omitempty"`

	// max tax included amount
	MaxTaxIncludedAmount *Money `json:"maxTaxIncludedAmount,omitempty"`

	// min duty free amount
	MinDutyFreeAmount *Money `json:"minDutyFreeAmount,omitempty"`

	// min tax included amount
	MinTaxIncludedAmount *Money `json:"minTaxIncludedAmount,omitempty"`
}

// Validate validates this price range
func (m *PriceRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxDutyFreeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTaxIncludedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinDutyFreeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinTaxIncludedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceRange) validateMaxDutyFreeAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxDutyFreeAmount) { // not required
		return nil
	}

	if m.MaxDutyFreeAmount != nil {
		if err := m.MaxDutyFreeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxDutyFreeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceRange) validateMaxTaxIncludedAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxTaxIncludedAmount) { // not required
		return nil
	}

	if m.MaxTaxIncludedAmount != nil {
		if err := m.MaxTaxIncludedAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxTaxIncludedAmount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceRange) validateMinDutyFreeAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.MinDutyFreeAmount) { // not required
		return nil
	}

	if m.MinDutyFreeAmount != nil {
		if err := m.MinDutyFreeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minDutyFreeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *PriceRange) validateMinTaxIncludedAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.MinTaxIncludedAmount) { // not required
		return nil
	}

	if m.MinTaxIncludedAmount != nil {
		if err := m.MinTaxIncludedAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minTaxIncludedAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceRange) UnmarshalBinary(b []byte) error {
	var res PriceRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
