// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteEventType Type of the Event
//
// swagger:model QuoteEventType
type QuoteEventType string

const (

	// QuoteEventTypeQUOTECREATIONNOTIFICATION captures enum value "QUOTE_CREATION_NOTIFICATION"
	QuoteEventTypeQUOTECREATIONNOTIFICATION QuoteEventType = "QUOTE_CREATION_NOTIFICATION"

	// QuoteEventTypeQUOTESTATECHANGENOTIFICATION captures enum value "QUOTE_STATE_CHANGE_NOTIFICATION"
	QuoteEventTypeQUOTESTATECHANGENOTIFICATION QuoteEventType = "QUOTE_STATE_CHANGE_NOTIFICATION"

	// QuoteEventTypeQUOTEINFORMATIONREQUIREDNOTIFICATION captures enum value "QUOTE_INFORMATION_REQUIRED_NOTIFICATION"
	QuoteEventTypeQUOTEINFORMATIONREQUIREDNOTIFICATION QuoteEventType = "QUOTE_INFORMATION_REQUIRED_NOTIFICATION"

	// QuoteEventTypeQUOTEATTRIBUTEVALUECHANGENOTIFICATION captures enum value "QUOTE_ATTRIBUTE_VALUE_CHANGE_NOTIFICATION"
	QuoteEventTypeQUOTEATTRIBUTEVALUECHANGENOTIFICATION QuoteEventType = "QUOTE_ATTRIBUTE_VALUE_CHANGE_NOTIFICATION"
)

// for schema
var quoteEventTypeEnum []interface{}

func init() {
	var res []QuoteEventType
	if err := json.Unmarshal([]byte(`["QUOTE_CREATION_NOTIFICATION","QUOTE_STATE_CHANGE_NOTIFICATION","QUOTE_INFORMATION_REQUIRED_NOTIFICATION","QUOTE_ATTRIBUTE_VALUE_CHANGE_NOTIFICATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteEventTypeEnum = append(quoteEventTypeEnum, v)
	}
}

func (m QuoteEventType) validateQuoteEventTypeEnum(path, location string, value QuoteEventType) error {
	if err := validate.Enum(path, location, value, quoteEventTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote event type
func (m QuoteEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
