// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceAlteration Is an amount, usually of money, that modifies the price charged for an order item
//
// swagger:model PriceAlteration
type PriceAlteration struct {

	// Link to the schema describing this REST resource
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Indicates the (class) type of the price alteration
	AtType string `json:"@type,omitempty"`

	// Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge).
	ApplicationDuration int32 `json:"applicationDuration,omitempty"`

	// A narrative that explains in detail the semantics of this order item price alteration.
	Description string `json:"description,omitempty"`

	// A short descriptive name such as "Monthly discount".
	Name string `json:"name,omitempty"`

	// percentage
	Percentage float32 `json:"percentage,omitempty"`

	// price
	Price *Price `json:"price,omitempty"`

	// A category that describes the price such as recurring, one time and usage.
	// Required: true
	PriceType *string `json:"priceType"`

	// Priority level for applying this alteration among all the defined alterations on the order item price
	Priority int32 `json:"priority,omitempty"`

	// Could be month, week...
	RecurringChargePeriod string `json:"recurringChargePeriod,omitempty"`

	// Could be minutes, GB...
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this price alteration
func (m *PriceAlteration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceAlteration) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *PriceAlteration) validatePriceType(formats strfmt.Registry) error {

	if err := validate.Required("priceType", "body", m.PriceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceAlteration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceAlteration) UnmarshalBinary(b []byte) error {
	var res PriceAlteration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
