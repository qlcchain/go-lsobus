// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductSpecificationRef A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.
//
// swagger:discriminator ProductSpecificationRef id
type ProductSpecificationRef interface {
	runtime.Validatable

	// describing
	Describing() *Describing
	SetDescribing(*Describing)

	// Reference of the product specification
	Href() string
	SetHref(string)

	// Unique identifier of the product specification
	ID() string
	SetID(string)

	// Name of the product specification
	Name() string
	SetName(string)

	// Version of the product specification
	Version() string
	SetVersion(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type productSpecificationRef struct {
	describingField *Describing

	hrefField string

	idField string

	nameField string

	versionField string
}

// Describing gets the describing of this polymorphic type
func (m *productSpecificationRef) Describing() *Describing {
	return m.describingField
}

// SetDescribing sets the describing of this polymorphic type
func (m *productSpecificationRef) SetDescribing(val *Describing) {
	m.describingField = val
}

// Href gets the href of this polymorphic type
func (m *productSpecificationRef) Href() string {
	return m.hrefField
}

// SetHref sets the href of this polymorphic type
func (m *productSpecificationRef) SetHref(val string) {
	m.hrefField = val
}

// ID gets the id of this polymorphic type
func (m *productSpecificationRef) ID() string {
	return "ProductSpecificationRef"
}

// SetID sets the id of this polymorphic type
func (m *productSpecificationRef) SetID(val string) {
}

// Name gets the name of this polymorphic type
func (m *productSpecificationRef) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *productSpecificationRef) SetName(val string) {
	m.nameField = val
}

// Version gets the version of this polymorphic type
func (m *productSpecificationRef) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *productSpecificationRef) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalProductSpecificationRefSlice unmarshals polymorphic slices of ProductSpecificationRef
func UnmarshalProductSpecificationRefSlice(reader io.Reader, consumer runtime.Consumer) ([]ProductSpecificationRef, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ProductSpecificationRef
	for _, element := range elements {
		obj, err := unmarshalProductSpecificationRef(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProductSpecificationRef unmarshals polymorphic ProductSpecificationRef
func UnmarshalProductSpecificationRef(reader io.Reader, consumer runtime.Consumer) (ProductSpecificationRef, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProductSpecificationRef(data, consumer)
}

func unmarshalProductSpecificationRef(data []byte, consumer runtime.Consumer) (ProductSpecificationRef, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the id property.
	var getType struct {
		ID string `json:"id"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("id", "body", getType.ID); err != nil {
		return nil, err
	}

	// The value of id is used to determine which type to create and unmarshal the data into
	switch getType.ID {
	case "ProductSpecificationRef":
		var result productSpecificationRef
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid id value: %q", getType.ID)
}

// Validate validates this product specification ref
func (m *productSpecificationRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescribing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *productSpecificationRef) validateDescribing(formats strfmt.Registry) error {

	if swag.IsZero(m.Describing()) { // not required
		return nil
	}

	if m.Describing() != nil {
		if err := m.Describing().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("describing")
			}
			return err
		}
	}

	return nil
}
