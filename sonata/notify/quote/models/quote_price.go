// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotePrice Description of price and discount awarded.
//
// swagger:model QuotePrice
type QuotePrice struct {

	// link to the schema describing this REST resource
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Indicates the base (class) type of the quote price
	AtType string `json:"@type,omitempty"`

	// Description of the quote/quote item price.
	Description string `json:"description,omitempty"`

	// Name of the quote /quote item price
	Name string `json:"name,omitempty"`

	// price
	Price *Price `json:"price,omitempty"`

	// price alteration
	PriceAlteration []*PriceAlteration `json:"priceAlteration"`

	// indicate if the price is for recurrent or no-recurrent charge
	// Required: true
	PriceType *string `json:"priceType"`

	// Used for recurring charge to indicate period (month, week, etc..)
	RecurringChargePeriod string `json:"recurringChargePeriod,omitempty"`

	// Unit of Measure if price depending on it (Gb, SMS volume, etc..).
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this quote price
func (m *QuotePrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceAlteration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotePrice) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *QuotePrice) validatePriceAlteration(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceAlteration) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceAlteration); i++ {
		if swag.IsZero(m.PriceAlteration[i]) { // not required
			continue
		}

		if m.PriceAlteration[i] != nil {
			if err := m.PriceAlteration[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceAlteration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuotePrice) validatePriceType(formats strfmt.Registry) error {

	if err := validate.Required("priceType", "body", m.PriceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotePrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotePrice) UnmarshalBinary(b []byte) error {
	var res QuotePrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
