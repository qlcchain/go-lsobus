// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product Configure the product characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the product that needs to be modified/deleted
//
// swagger:model Product
type Product struct {

	// Reference of the product
	// Required: true
	Href *string `json:"href"`

	// Unique identifier of the product
	// Required: true
	ID *string `json:"id"`

	productSpecificationField ProductSpecificationRef
}

// ProductSpecification gets the product specification of this base type
func (m *Product) ProductSpecification() ProductSpecificationRef {
	return m.productSpecificationField
}

// SetProductSpecification sets the product specification of this base type
func (m *Product) SetProductSpecification(val ProductSpecificationRef) {
	m.productSpecificationField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Product) UnmarshalJSON(raw []byte) error {
	var data struct {
		Href *string `json:"href"`

		ID *string `json:"id"`

		ProductSpecification json.RawMessage `json:"productSpecification,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propProductSpecification ProductSpecificationRef
	if string(data.ProductSpecification) != "null" {
		productSpecification, err := UnmarshalProductSpecificationRef(bytes.NewBuffer(data.ProductSpecification), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propProductSpecification = productSpecification
	}

	var result Product

	// href
	result.Href = data.Href

	// id
	result.ID = data.ID

	// productSpecification
	result.productSpecificationField = propProductSpecification

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Product) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Href *string `json:"href"`

		ID *string `json:"id"`
	}{

		Href: m.Href,

		ID: m.ID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ProductSpecification ProductSpecificationRef `json:"productSpecification,omitempty"`
	}{

		ProductSpecification: m.productSpecificationField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSpecification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateProductSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductSpecification()) { // not required
		return nil
	}

	if err := m.ProductSpecification().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("productSpecification")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
