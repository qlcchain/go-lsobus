// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProductOrderStateType An enumeration of valid order states
//
// swagger:model ProductOrderStateType
type ProductOrderStateType string

const (

	// ProductOrderStateTypeCompleted captures enum value "completed"
	ProductOrderStateTypeCompleted ProductOrderStateType = "completed"

	// ProductOrderStateTypePartial captures enum value "partial"
	ProductOrderStateTypePartial ProductOrderStateType = "partial"

	// ProductOrderStateTypeFailed captures enum value "failed"
	ProductOrderStateTypeFailed ProductOrderStateType = "failed"

	// ProductOrderStateTypeInProgressJeopardy captures enum value "inProgress.jeopardy"
	ProductOrderStateTypeInProgressJeopardy ProductOrderStateType = "inProgress.jeopardy"

	// ProductOrderStateTypeInProgressConfirmed captures enum value "inProgress.confirmed"
	ProductOrderStateTypeInProgressConfirmed ProductOrderStateType = "inProgress.confirmed"

	// ProductOrderStateTypeInProgressConfigured captures enum value "inProgress.configured"
	ProductOrderStateTypeInProgressConfigured ProductOrderStateType = "inProgress.configured"

	// ProductOrderStateTypeCancelled captures enum value "cancelled"
	ProductOrderStateTypeCancelled ProductOrderStateType = "cancelled"

	// ProductOrderStateTypePendingCancellation captures enum value "pendingCancellation"
	ProductOrderStateTypePendingCancellation ProductOrderStateType = "pendingCancellation"

	// ProductOrderStateTypeAssessingCancellation captures enum value "assessingCancellation"
	ProductOrderStateTypeAssessingCancellation ProductOrderStateType = "assessingCancellation"

	// ProductOrderStateTypeHeld captures enum value "held"
	ProductOrderStateTypeHeld ProductOrderStateType = "held"

	// ProductOrderStateTypePending captures enum value "pending"
	ProductOrderStateTypePending ProductOrderStateType = "pending"

	// ProductOrderStateTypeInProgress captures enum value "inProgress"
	ProductOrderStateTypeInProgress ProductOrderStateType = "inProgress"

	// ProductOrderStateTypeRejected captures enum value "rejected"
	ProductOrderStateTypeRejected ProductOrderStateType = "rejected"

	// ProductOrderStateTypeAcknowledged captures enum value "acknowledged"
	ProductOrderStateTypeAcknowledged ProductOrderStateType = "acknowledged"
)

// for schema
var productOrderStateTypeEnum []interface{}

func init() {
	var res []ProductOrderStateType
	if err := json.Unmarshal([]byte(`["completed","partial","failed","inProgress.jeopardy","inProgress.confirmed","inProgress.configured","cancelled","pendingCancellation","assessingCancellation","held","pending","inProgress","rejected","acknowledged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productOrderStateTypeEnum = append(productOrderStateTypeEnum, v)
	}
}

func (m ProductOrderStateType) validateProductOrderStateTypeEnum(path, location string, value ProductOrderStateType) error {
	if err := validate.Enum(path, location, value, productOrderStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this product order state type
func (m ProductOrderStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProductOrderStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
