// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ELineSpec Description of ELineSpec for Ordering - source 57.1.
//
// swagger:model ELineSpec
type ELineSpec struct {
	atReferredTypeField string

	atSchemaLocationField string

	MEFELineSpecV3
}

// AtReferredType gets the at referred type of this subtype
func (m *ELineSpec) AtReferredType() string {
	return m.atReferredTypeField
}

// SetAtReferredType sets the at referred type of this subtype
func (m *ELineSpec) SetAtReferredType(val string) {
	m.atReferredTypeField = val
}

// AtSchemaLocation gets the at schema location of this subtype
func (m *ELineSpec) AtSchemaLocation() string {
	return m.atSchemaLocationField
}

// SetAtSchemaLocation sets the at schema location of this subtype
func (m *ELineSpec) SetAtSchemaLocation(val string) {
	m.atSchemaLocationField = val
}

// AtType gets the at type of this subtype
func (m *ELineSpec) AtType() string {
	return "ELineSpec"
}

// SetAtType sets the at type of this subtype
func (m *ELineSpec) SetAtType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ELineSpec) UnmarshalJSON(raw []byte) error {
	var data struct {
		MEFELineSpecV3
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		AtReferredType string `json:"@referredType,omitempty"`

		AtSchemaLocation string `json:"@schemaLocation,omitempty"`

		AtType string `json:"@type,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ELineSpec

	result.atReferredTypeField = base.AtReferredType

	result.atSchemaLocationField = base.AtSchemaLocation

	if base.AtType != result.AtType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid @type value: %q", base.AtType)
	}
	result.MEFELineSpecV3 = data.MEFELineSpecV3

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ELineSpec) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		MEFELineSpecV3
	}{

		MEFELineSpecV3: m.MEFELineSpecV3,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		AtReferredType string `json:"@referredType,omitempty"`

		AtSchemaLocation string `json:"@schemaLocation,omitempty"`

		AtType string `json:"@type,omitempty"`
	}{

		AtReferredType: m.AtReferredType(),

		AtSchemaLocation: m.AtSchemaLocation(),

		AtType: m.AtType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this e line spec
func (m *ELineSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MEFELineSpecV3
	if err := m.MEFELineSpecV3.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ELineSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ELineSpec) UnmarshalBinary(b []byte) error {
	var res ELineSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
