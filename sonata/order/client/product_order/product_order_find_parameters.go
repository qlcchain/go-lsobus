// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewProductOrderFindParams creates a new ProductOrderFindParams object
// with the default values initialized.
func NewProductOrderFindParams() *ProductOrderFindParams {
	var ()
	return &ProductOrderFindParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProductOrderFindParamsWithTimeout creates a new ProductOrderFindParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProductOrderFindParamsWithTimeout(timeout time.Duration) *ProductOrderFindParams {
	var ()
	return &ProductOrderFindParams{

		timeout: timeout,
	}
}

// NewProductOrderFindParamsWithContext creates a new ProductOrderFindParams object
// with the default values initialized, and the ability to set a context for a request
func NewProductOrderFindParamsWithContext(ctx context.Context) *ProductOrderFindParams {
	var ()
	return &ProductOrderFindParams{

		Context: ctx,
	}
}

// NewProductOrderFindParamsWithHTTPClient creates a new ProductOrderFindParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProductOrderFindParamsWithHTTPClient(client *http.Client) *ProductOrderFindParams {
	var ()
	return &ProductOrderFindParams{
		HTTPClient: client,
	}
}

/*ProductOrderFindParams contains all the parameters to send to the API endpoint
for the product order find operation typically these are written to a http.Request
*/
type ProductOrderFindParams struct {

	/*BuyerID
	  A Party Role played by an Individual or an Organization that buys products and services from a Seller. Specifically, the ID of the Service Provider (Buyer) organization placing the order.

	*/
	BuyerID *string
	/*BuyerRequestedDateGt
	  Buyer requested date greater than

	*/
	BuyerRequestedDateGt *strfmt.DateTime
	/*BuyerRequestedDateLt
	  Buyer requested date lesser than

	*/
	BuyerRequestedDateLt *strfmt.DateTime
	/*CompletionDateGt
	  Effective completion date greater than

	*/
	CompletionDateGt *strfmt.DateTime
	/*CompletionDateLt
	  Effective completion date lesser than

	*/
	CompletionDateLt *strfmt.DateTime
	/*ExpectedCompletionDateGt
	  Seller planned completion date greater than

	*/
	ExpectedCompletionDateGt *strfmt.DateTime
	/*ExpectedCompletionDateLt
	  Seller planned completion date lesser than

	*/
	ExpectedCompletionDateLt *strfmt.DateTime
	/*ExternalID
	  A number that uniquely identifies an order within the Buyer's enterprise.

	*/
	ExternalID *string
	/*Limit
	  Requested number of resources to be provided in response requested by client

	*/
	Limit *string
	/*Offset
	  Requested index for start of resources to be provided in response requested by client

	*/
	Offset *string
	/*OrderCancellationDateGt
	  order cancellation date greater than

	*/
	OrderCancellationDateGt *strfmt.DateTime
	/*OrderCancellationDateLt
	  order cancellation date lesser than

	*/
	OrderCancellationDateLt *strfmt.DateTime
	/*OrderDateGt
	  Date when the order was created greater than

	*/
	OrderDateGt *strfmt.DateTime
	/*OrderDateLt
	  Date when the order was created lesser than

	*/
	OrderDateLt *strfmt.DateTime
	/*ProjectID
	  An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.

	*/
	ProjectID *string
	/*RequestedCompletionDateGt
	  Identifies the Buyer's desired due date (requested delivery date) greater than

	*/
	RequestedCompletionDateGt *strfmt.DateTime
	/*RequestedCompletionDateLt
	  Identifies the Buyer's desired due date (requested delivery date) lesser than

	*/
	RequestedCompletionDateLt *strfmt.DateTime
	/*RequestedStartDateGt
	  Buyer requested start date greater than

	*/
	RequestedStartDateGt *strfmt.DateTime
	/*RequestedStartDateLt
	  Buyer requested start date lesser than

	*/
	RequestedStartDateLt *strfmt.DateTime
	/*SellerID
	  A Party Role played by an organization that provides products and services to a Buyer.
	Specifically, the ID of the Partner/Access Provider (Seller) organization receiving the order.

	*/
	SellerID *string
	/*SiteCompanyName
	  The name of the company that is located at the service location.  This may be different from the name of the Buyer that ordered services at that site.

	*/
	SiteCompanyName *string
	/*SiteCustomerName
	  The customer name at a site where the service is being delivered

	*/
	SiteCustomerName *string
	/*SiteName
	  A name by which the site is known.

	*/
	SiteName *string
	/*State
	  The status of the order

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the product order find params
func (o *ProductOrderFindParams) WithTimeout(timeout time.Duration) *ProductOrderFindParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the product order find params
func (o *ProductOrderFindParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the product order find params
func (o *ProductOrderFindParams) WithContext(ctx context.Context) *ProductOrderFindParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the product order find params
func (o *ProductOrderFindParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the product order find params
func (o *ProductOrderFindParams) WithHTTPClient(client *http.Client) *ProductOrderFindParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the product order find params
func (o *ProductOrderFindParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuyerID adds the buyerID to the product order find params
func (o *ProductOrderFindParams) WithBuyerID(buyerID *string) *ProductOrderFindParams {
	o.SetBuyerID(buyerID)
	return o
}

// SetBuyerID adds the buyerId to the product order find params
func (o *ProductOrderFindParams) SetBuyerID(buyerID *string) {
	o.BuyerID = buyerID
}

// WithBuyerRequestedDateGt adds the buyerRequestedDateGt to the product order find params
func (o *ProductOrderFindParams) WithBuyerRequestedDateGt(buyerRequestedDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetBuyerRequestedDateGt(buyerRequestedDateGt)
	return o
}

// SetBuyerRequestedDateGt adds the buyerRequestedDateGt to the product order find params
func (o *ProductOrderFindParams) SetBuyerRequestedDateGt(buyerRequestedDateGt *strfmt.DateTime) {
	o.BuyerRequestedDateGt = buyerRequestedDateGt
}

// WithBuyerRequestedDateLt adds the buyerRequestedDateLt to the product order find params
func (o *ProductOrderFindParams) WithBuyerRequestedDateLt(buyerRequestedDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetBuyerRequestedDateLt(buyerRequestedDateLt)
	return o
}

// SetBuyerRequestedDateLt adds the buyerRequestedDateLt to the product order find params
func (o *ProductOrderFindParams) SetBuyerRequestedDateLt(buyerRequestedDateLt *strfmt.DateTime) {
	o.BuyerRequestedDateLt = buyerRequestedDateLt
}

// WithCompletionDateGt adds the completionDateGt to the product order find params
func (o *ProductOrderFindParams) WithCompletionDateGt(completionDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetCompletionDateGt(completionDateGt)
	return o
}

// SetCompletionDateGt adds the completionDateGt to the product order find params
func (o *ProductOrderFindParams) SetCompletionDateGt(completionDateGt *strfmt.DateTime) {
	o.CompletionDateGt = completionDateGt
}

// WithCompletionDateLt adds the completionDateLt to the product order find params
func (o *ProductOrderFindParams) WithCompletionDateLt(completionDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetCompletionDateLt(completionDateLt)
	return o
}

// SetCompletionDateLt adds the completionDateLt to the product order find params
func (o *ProductOrderFindParams) SetCompletionDateLt(completionDateLt *strfmt.DateTime) {
	o.CompletionDateLt = completionDateLt
}

// WithExpectedCompletionDateGt adds the expectedCompletionDateGt to the product order find params
func (o *ProductOrderFindParams) WithExpectedCompletionDateGt(expectedCompletionDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetExpectedCompletionDateGt(expectedCompletionDateGt)
	return o
}

// SetExpectedCompletionDateGt adds the expectedCompletionDateGt to the product order find params
func (o *ProductOrderFindParams) SetExpectedCompletionDateGt(expectedCompletionDateGt *strfmt.DateTime) {
	o.ExpectedCompletionDateGt = expectedCompletionDateGt
}

// WithExpectedCompletionDateLt adds the expectedCompletionDateLt to the product order find params
func (o *ProductOrderFindParams) WithExpectedCompletionDateLt(expectedCompletionDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetExpectedCompletionDateLt(expectedCompletionDateLt)
	return o
}

// SetExpectedCompletionDateLt adds the expectedCompletionDateLt to the product order find params
func (o *ProductOrderFindParams) SetExpectedCompletionDateLt(expectedCompletionDateLt *strfmt.DateTime) {
	o.ExpectedCompletionDateLt = expectedCompletionDateLt
}

// WithExternalID adds the externalID to the product order find params
func (o *ProductOrderFindParams) WithExternalID(externalID *string) *ProductOrderFindParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the product order find params
func (o *ProductOrderFindParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithLimit adds the limit to the product order find params
func (o *ProductOrderFindParams) WithLimit(limit *string) *ProductOrderFindParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the product order find params
func (o *ProductOrderFindParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the product order find params
func (o *ProductOrderFindParams) WithOffset(offset *string) *ProductOrderFindParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the product order find params
func (o *ProductOrderFindParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrderCancellationDateGt adds the orderCancellationDateGt to the product order find params
func (o *ProductOrderFindParams) WithOrderCancellationDateGt(orderCancellationDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetOrderCancellationDateGt(orderCancellationDateGt)
	return o
}

// SetOrderCancellationDateGt adds the orderCancellationDateGt to the product order find params
func (o *ProductOrderFindParams) SetOrderCancellationDateGt(orderCancellationDateGt *strfmt.DateTime) {
	o.OrderCancellationDateGt = orderCancellationDateGt
}

// WithOrderCancellationDateLt adds the orderCancellationDateLt to the product order find params
func (o *ProductOrderFindParams) WithOrderCancellationDateLt(orderCancellationDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetOrderCancellationDateLt(orderCancellationDateLt)
	return o
}

// SetOrderCancellationDateLt adds the orderCancellationDateLt to the product order find params
func (o *ProductOrderFindParams) SetOrderCancellationDateLt(orderCancellationDateLt *strfmt.DateTime) {
	o.OrderCancellationDateLt = orderCancellationDateLt
}

// WithOrderDateGt adds the orderDateGt to the product order find params
func (o *ProductOrderFindParams) WithOrderDateGt(orderDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetOrderDateGt(orderDateGt)
	return o
}

// SetOrderDateGt adds the orderDateGt to the product order find params
func (o *ProductOrderFindParams) SetOrderDateGt(orderDateGt *strfmt.DateTime) {
	o.OrderDateGt = orderDateGt
}

// WithOrderDateLt adds the orderDateLt to the product order find params
func (o *ProductOrderFindParams) WithOrderDateLt(orderDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetOrderDateLt(orderDateLt)
	return o
}

// SetOrderDateLt adds the orderDateLt to the product order find params
func (o *ProductOrderFindParams) SetOrderDateLt(orderDateLt *strfmt.DateTime) {
	o.OrderDateLt = orderDateLt
}

// WithProjectID adds the projectID to the product order find params
func (o *ProductOrderFindParams) WithProjectID(projectID *string) *ProductOrderFindParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the product order find params
func (o *ProductOrderFindParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithRequestedCompletionDateGt adds the requestedCompletionDateGt to the product order find params
func (o *ProductOrderFindParams) WithRequestedCompletionDateGt(requestedCompletionDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetRequestedCompletionDateGt(requestedCompletionDateGt)
	return o
}

// SetRequestedCompletionDateGt adds the requestedCompletionDateGt to the product order find params
func (o *ProductOrderFindParams) SetRequestedCompletionDateGt(requestedCompletionDateGt *strfmt.DateTime) {
	o.RequestedCompletionDateGt = requestedCompletionDateGt
}

// WithRequestedCompletionDateLt adds the requestedCompletionDateLt to the product order find params
func (o *ProductOrderFindParams) WithRequestedCompletionDateLt(requestedCompletionDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetRequestedCompletionDateLt(requestedCompletionDateLt)
	return o
}

// SetRequestedCompletionDateLt adds the requestedCompletionDateLt to the product order find params
func (o *ProductOrderFindParams) SetRequestedCompletionDateLt(requestedCompletionDateLt *strfmt.DateTime) {
	o.RequestedCompletionDateLt = requestedCompletionDateLt
}

// WithRequestedStartDateGt adds the requestedStartDateGt to the product order find params
func (o *ProductOrderFindParams) WithRequestedStartDateGt(requestedStartDateGt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetRequestedStartDateGt(requestedStartDateGt)
	return o
}

// SetRequestedStartDateGt adds the requestedStartDateGt to the product order find params
func (o *ProductOrderFindParams) SetRequestedStartDateGt(requestedStartDateGt *strfmt.DateTime) {
	o.RequestedStartDateGt = requestedStartDateGt
}

// WithRequestedStartDateLt adds the requestedStartDateLt to the product order find params
func (o *ProductOrderFindParams) WithRequestedStartDateLt(requestedStartDateLt *strfmt.DateTime) *ProductOrderFindParams {
	o.SetRequestedStartDateLt(requestedStartDateLt)
	return o
}

// SetRequestedStartDateLt adds the requestedStartDateLt to the product order find params
func (o *ProductOrderFindParams) SetRequestedStartDateLt(requestedStartDateLt *strfmt.DateTime) {
	o.RequestedStartDateLt = requestedStartDateLt
}

// WithSellerID adds the sellerID to the product order find params
func (o *ProductOrderFindParams) WithSellerID(sellerID *string) *ProductOrderFindParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the product order find params
func (o *ProductOrderFindParams) SetSellerID(sellerID *string) {
	o.SellerID = sellerID
}

// WithSiteCompanyName adds the siteCompanyName to the product order find params
func (o *ProductOrderFindParams) WithSiteCompanyName(siteCompanyName *string) *ProductOrderFindParams {
	o.SetSiteCompanyName(siteCompanyName)
	return o
}

// SetSiteCompanyName adds the siteCompanyName to the product order find params
func (o *ProductOrderFindParams) SetSiteCompanyName(siteCompanyName *string) {
	o.SiteCompanyName = siteCompanyName
}

// WithSiteCustomerName adds the siteCustomerName to the product order find params
func (o *ProductOrderFindParams) WithSiteCustomerName(siteCustomerName *string) *ProductOrderFindParams {
	o.SetSiteCustomerName(siteCustomerName)
	return o
}

// SetSiteCustomerName adds the siteCustomerName to the product order find params
func (o *ProductOrderFindParams) SetSiteCustomerName(siteCustomerName *string) {
	o.SiteCustomerName = siteCustomerName
}

// WithSiteName adds the siteName to the product order find params
func (o *ProductOrderFindParams) WithSiteName(siteName *string) *ProductOrderFindParams {
	o.SetSiteName(siteName)
	return o
}

// SetSiteName adds the siteName to the product order find params
func (o *ProductOrderFindParams) SetSiteName(siteName *string) {
	o.SiteName = siteName
}

// WithState adds the state to the product order find params
func (o *ProductOrderFindParams) WithState(state *string) *ProductOrderFindParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the product order find params
func (o *ProductOrderFindParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *ProductOrderFindParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BuyerID != nil {

		// query param buyerId
		var qrBuyerID string
		if o.BuyerID != nil {
			qrBuyerID = *o.BuyerID
		}
		qBuyerID := qrBuyerID
		if qBuyerID != "" {
			if err := r.SetQueryParam("buyerId", qBuyerID); err != nil {
				return err
			}
		}

	}

	if o.BuyerRequestedDateGt != nil {

		// query param buyerRequestedDate.gt
		var qrBuyerRequestedDateGt strfmt.DateTime
		if o.BuyerRequestedDateGt != nil {
			qrBuyerRequestedDateGt = *o.BuyerRequestedDateGt
		}
		qBuyerRequestedDateGt := qrBuyerRequestedDateGt.String()
		if qBuyerRequestedDateGt != "" {
			if err := r.SetQueryParam("buyerRequestedDate.gt", qBuyerRequestedDateGt); err != nil {
				return err
			}
		}

	}

	if o.BuyerRequestedDateLt != nil {

		// query param buyerRequestedDate.lt
		var qrBuyerRequestedDateLt strfmt.DateTime
		if o.BuyerRequestedDateLt != nil {
			qrBuyerRequestedDateLt = *o.BuyerRequestedDateLt
		}
		qBuyerRequestedDateLt := qrBuyerRequestedDateLt.String()
		if qBuyerRequestedDateLt != "" {
			if err := r.SetQueryParam("buyerRequestedDate.lt", qBuyerRequestedDateLt); err != nil {
				return err
			}
		}

	}

	if o.CompletionDateGt != nil {

		// query param completionDate.gt
		var qrCompletionDateGt strfmt.DateTime
		if o.CompletionDateGt != nil {
			qrCompletionDateGt = *o.CompletionDateGt
		}
		qCompletionDateGt := qrCompletionDateGt.String()
		if qCompletionDateGt != "" {
			if err := r.SetQueryParam("completionDate.gt", qCompletionDateGt); err != nil {
				return err
			}
		}

	}

	if o.CompletionDateLt != nil {

		// query param completionDate.lt
		var qrCompletionDateLt strfmt.DateTime
		if o.CompletionDateLt != nil {
			qrCompletionDateLt = *o.CompletionDateLt
		}
		qCompletionDateLt := qrCompletionDateLt.String()
		if qCompletionDateLt != "" {
			if err := r.SetQueryParam("completionDate.lt", qCompletionDateLt); err != nil {
				return err
			}
		}

	}

	if o.ExpectedCompletionDateGt != nil {

		// query param expectedCompletionDate.gt
		var qrExpectedCompletionDateGt strfmt.DateTime
		if o.ExpectedCompletionDateGt != nil {
			qrExpectedCompletionDateGt = *o.ExpectedCompletionDateGt
		}
		qExpectedCompletionDateGt := qrExpectedCompletionDateGt.String()
		if qExpectedCompletionDateGt != "" {
			if err := r.SetQueryParam("expectedCompletionDate.gt", qExpectedCompletionDateGt); err != nil {
				return err
			}
		}

	}

	if o.ExpectedCompletionDateLt != nil {

		// query param expectedCompletionDate.lt
		var qrExpectedCompletionDateLt strfmt.DateTime
		if o.ExpectedCompletionDateLt != nil {
			qrExpectedCompletionDateLt = *o.ExpectedCompletionDateLt
		}
		qExpectedCompletionDateLt := qrExpectedCompletionDateLt.String()
		if qExpectedCompletionDateLt != "" {
			if err := r.SetQueryParam("expectedCompletionDate.lt", qExpectedCompletionDateLt); err != nil {
				return err
			}
		}

	}

	if o.ExternalID != nil {

		// query param externalId
		var qrExternalID string
		if o.ExternalID != nil {
			qrExternalID = *o.ExternalID
		}
		qExternalID := qrExternalID
		if qExternalID != "" {
			if err := r.SetQueryParam("externalId", qExternalID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OrderCancellationDateGt != nil {

		// query param orderCancellationDate.gt
		var qrOrderCancellationDateGt strfmt.DateTime
		if o.OrderCancellationDateGt != nil {
			qrOrderCancellationDateGt = *o.OrderCancellationDateGt
		}
		qOrderCancellationDateGt := qrOrderCancellationDateGt.String()
		if qOrderCancellationDateGt != "" {
			if err := r.SetQueryParam("orderCancellationDate.gt", qOrderCancellationDateGt); err != nil {
				return err
			}
		}

	}

	if o.OrderCancellationDateLt != nil {

		// query param orderCancellationDate.lt
		var qrOrderCancellationDateLt strfmt.DateTime
		if o.OrderCancellationDateLt != nil {
			qrOrderCancellationDateLt = *o.OrderCancellationDateLt
		}
		qOrderCancellationDateLt := qrOrderCancellationDateLt.String()
		if qOrderCancellationDateLt != "" {
			if err := r.SetQueryParam("orderCancellationDate.lt", qOrderCancellationDateLt); err != nil {
				return err
			}
		}

	}

	if o.OrderDateGt != nil {

		// query param orderDate.gt
		var qrOrderDateGt strfmt.DateTime
		if o.OrderDateGt != nil {
			qrOrderDateGt = *o.OrderDateGt
		}
		qOrderDateGt := qrOrderDateGt.String()
		if qOrderDateGt != "" {
			if err := r.SetQueryParam("orderDate.gt", qOrderDateGt); err != nil {
				return err
			}
		}

	}

	if o.OrderDateLt != nil {

		// query param orderDate.lt
		var qrOrderDateLt strfmt.DateTime
		if o.OrderDateLt != nil {
			qrOrderDateLt = *o.OrderDateLt
		}
		qOrderDateLt := qrOrderDateLt.String()
		if qOrderDateLt != "" {
			if err := r.SetQueryParam("orderDate.lt", qOrderDateLt); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.RequestedCompletionDateGt != nil {

		// query param requestedCompletionDate.gt
		var qrRequestedCompletionDateGt strfmt.DateTime
		if o.RequestedCompletionDateGt != nil {
			qrRequestedCompletionDateGt = *o.RequestedCompletionDateGt
		}
		qRequestedCompletionDateGt := qrRequestedCompletionDateGt.String()
		if qRequestedCompletionDateGt != "" {
			if err := r.SetQueryParam("requestedCompletionDate.gt", qRequestedCompletionDateGt); err != nil {
				return err
			}
		}

	}

	if o.RequestedCompletionDateLt != nil {

		// query param requestedCompletionDate.lt
		var qrRequestedCompletionDateLt strfmt.DateTime
		if o.RequestedCompletionDateLt != nil {
			qrRequestedCompletionDateLt = *o.RequestedCompletionDateLt
		}
		qRequestedCompletionDateLt := qrRequestedCompletionDateLt.String()
		if qRequestedCompletionDateLt != "" {
			if err := r.SetQueryParam("requestedCompletionDate.lt", qRequestedCompletionDateLt); err != nil {
				return err
			}
		}

	}

	if o.RequestedStartDateGt != nil {

		// query param requestedStartDate.gt
		var qrRequestedStartDateGt strfmt.DateTime
		if o.RequestedStartDateGt != nil {
			qrRequestedStartDateGt = *o.RequestedStartDateGt
		}
		qRequestedStartDateGt := qrRequestedStartDateGt.String()
		if qRequestedStartDateGt != "" {
			if err := r.SetQueryParam("requestedStartDate.gt", qRequestedStartDateGt); err != nil {
				return err
			}
		}

	}

	if o.RequestedStartDateLt != nil {

		// query param requestedStartDate.lt
		var qrRequestedStartDateLt strfmt.DateTime
		if o.RequestedStartDateLt != nil {
			qrRequestedStartDateLt = *o.RequestedStartDateLt
		}
		qRequestedStartDateLt := qrRequestedStartDateLt.String()
		if qRequestedStartDateLt != "" {
			if err := r.SetQueryParam("requestedStartDate.lt", qRequestedStartDateLt); err != nil {
				return err
			}
		}

	}

	if o.SellerID != nil {

		// query param sellerId
		var qrSellerID string
		if o.SellerID != nil {
			qrSellerID = *o.SellerID
		}
		qSellerID := qrSellerID
		if qSellerID != "" {
			if err := r.SetQueryParam("sellerId", qSellerID); err != nil {
				return err
			}
		}

	}

	if o.SiteCompanyName != nil {

		// query param siteCompanyName
		var qrSiteCompanyName string
		if o.SiteCompanyName != nil {
			qrSiteCompanyName = *o.SiteCompanyName
		}
		qSiteCompanyName := qrSiteCompanyName
		if qSiteCompanyName != "" {
			if err := r.SetQueryParam("siteCompanyName", qSiteCompanyName); err != nil {
				return err
			}
		}

	}

	if o.SiteCustomerName != nil {

		// query param siteCustomerName
		var qrSiteCustomerName string
		if o.SiteCustomerName != nil {
			qrSiteCustomerName = *o.SiteCustomerName
		}
		qSiteCustomerName := qrSiteCustomerName
		if qSiteCustomerName != "" {
			if err := r.SetQueryParam("siteCustomerName", qSiteCustomerName); err != nil {
				return err
			}
		}

	}

	if o.SiteName != nil {

		// query param siteName
		var qrSiteName string
		if o.SiteName != nil {
			qrSiteName = *o.SiteName
		}
		qSiteName := qrSiteName
		if qSiteName != "" {
			if err := r.SetQueryParam("siteName", qSiteName); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
