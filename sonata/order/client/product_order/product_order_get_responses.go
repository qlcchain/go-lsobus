// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qlcchain/go-virtual-lsobus/sonata/order/models"
)

// ProductOrderGetReader is a Reader for the ProductOrderGet structure.
type ProductOrderGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProductOrderGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProductOrderGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProductOrderGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProductOrderGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProductOrderGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProductOrderGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewProductOrderGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewProductOrderGetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewProductOrderGetUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProductOrderGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewProductOrderGetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProductOrderGetOK creates a ProductOrderGetOK with default headers values
func NewProductOrderGetOK() *ProductOrderGetOK {
	return &ProductOrderGetOK{}
}

/*ProductOrderGetOK handles this case with default header values.

Ok
*/
type ProductOrderGetOK struct {
	Payload *models.ProductOrder
}

func (o *ProductOrderGetOK) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetOK  %+v", 200, o.Payload)
}

func (o *ProductOrderGetOK) GetPayload() *models.ProductOrder {
	return o.Payload
}

func (o *ProductOrderGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProductOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetBadRequest creates a ProductOrderGetBadRequest with default headers values
func NewProductOrderGetBadRequest() *ProductOrderGetBadRequest {
	return &ProductOrderGetBadRequest{}
}

/*ProductOrderGetBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type ProductOrderGetBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetBadRequest  %+v", 400, o.Payload)
}

func (o *ProductOrderGetBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetUnauthorized creates a ProductOrderGetUnauthorized with default headers values
func NewProductOrderGetUnauthorized() *ProductOrderGetUnauthorized {
	return &ProductOrderGetUnauthorized{}
}

/*ProductOrderGetUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type ProductOrderGetUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetUnauthorized  %+v", 401, o.Payload)
}

func (o *ProductOrderGetUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetForbidden creates a ProductOrderGetForbidden with default headers values
func NewProductOrderGetForbidden() *ProductOrderGetForbidden {
	return &ProductOrderGetForbidden{}
}

/*ProductOrderGetForbidden handles this case with default header values.

Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type ProductOrderGetForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetForbidden) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetForbidden  %+v", 403, o.Payload)
}

func (o *ProductOrderGetForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetNotFound creates a ProductOrderGetNotFound with default headers values
func NewProductOrderGetNotFound() *ProductOrderGetNotFound {
	return &ProductOrderGetNotFound{}
}

/*ProductOrderGetNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type ProductOrderGetNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetNotFound) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetNotFound  %+v", 404, o.Payload)
}

func (o *ProductOrderGetNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetMethodNotAllowed creates a ProductOrderGetMethodNotAllowed with default headers values
func NewProductOrderGetMethodNotAllowed() *ProductOrderGetMethodNotAllowed {
	return &ProductOrderGetMethodNotAllowed{}
}

/*ProductOrderGetMethodNotAllowed handles this case with default header values.

Method Not Allowed

List of supported error codes:
- 61: Method not allowed
*/
type ProductOrderGetMethodNotAllowed struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ProductOrderGetMethodNotAllowed) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetRequestTimeout creates a ProductOrderGetRequestTimeout with default headers values
func NewProductOrderGetRequestTimeout() *ProductOrderGetRequestTimeout {
	return &ProductOrderGetRequestTimeout{}
}

/*ProductOrderGetRequestTimeout handles this case with default header values.

Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type ProductOrderGetRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetRequestTimeout  %+v", 408, o.Payload)
}

func (o *ProductOrderGetRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetUnprocessableEntity creates a ProductOrderGetUnprocessableEntity with default headers values
func NewProductOrderGetUnprocessableEntity() *ProductOrderGetUnprocessableEntity {
	return &ProductOrderGetUnprocessableEntity{}
}

/*ProductOrderGetUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error
*/
type ProductOrderGetUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ProductOrderGetUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetInternalServerError creates a ProductOrderGetInternalServerError with default headers values
func NewProductOrderGetInternalServerError() *ProductOrderGetInternalServerError {
	return &ProductOrderGetInternalServerError{}
}

/*ProductOrderGetInternalServerError handles this case with default header values.

Internal Server Error

List of supported error codes:
- 1: Internal error
*/
type ProductOrderGetInternalServerError struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetInternalServerError  %+v", 500, o.Payload)
}

func (o *ProductOrderGetInternalServerError) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderGetServiceUnavailable creates a ProductOrderGetServiceUnavailable with default headers values
func NewProductOrderGetServiceUnavailable() *ProductOrderGetServiceUnavailable {
	return &ProductOrderGetServiceUnavailable{}
}

/*ProductOrderGetServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type ProductOrderGetServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderGetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /productOrder/{ProductOrderId}][%d] productOrderGetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ProductOrderGetServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderGetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
