// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/qlcchain/go-virtual-lsobus/sonata/order/models"
)

// ProductOrderFindReader is a Reader for the ProductOrderFind structure.
type ProductOrderFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProductOrderFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProductOrderFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProductOrderFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProductOrderFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProductOrderFindForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProductOrderFindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewProductOrderFindMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewProductOrderFindRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewProductOrderFindUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProductOrderFindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewProductOrderFindServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProductOrderFindOK creates a ProductOrderFindOK with default headers values
func NewProductOrderFindOK() *ProductOrderFindOK {
	return &ProductOrderFindOK{}
}

/*ProductOrderFindOK handles this case with default header values.

Ok
*/
type ProductOrderFindOK struct {
	/*The number of resources retrieved in the response
	 */
	XResultCount int32
	/*The total number of matching resources
	 */
	XTotalCount int32

	Payload []*models.ProductOrderSummary
}

func (o *ProductOrderFindOK) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindOK  %+v", 200, o.Payload)
}

func (o *ProductOrderFindOK) GetPayload() []*models.ProductOrderSummary {
	return o.Payload
}

func (o *ProductOrderFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Result-Count
	xResultCount, err := swag.ConvertInt32(response.GetHeader("X-Result-Count"))
	if err != nil {
		return errors.InvalidType("X-Result-Count", "header", "int32", response.GetHeader("X-Result-Count"))
	}
	o.XResultCount = xResultCount

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt32(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int32", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindBadRequest creates a ProductOrderFindBadRequest with default headers values
func NewProductOrderFindBadRequest() *ProductOrderFindBadRequest {
	return &ProductOrderFindBadRequest{}
}

/*ProductOrderFindBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type ProductOrderFindBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindBadRequest) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindBadRequest  %+v", 400, o.Payload)
}

func (o *ProductOrderFindBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindUnauthorized creates a ProductOrderFindUnauthorized with default headers values
func NewProductOrderFindUnauthorized() *ProductOrderFindUnauthorized {
	return &ProductOrderFindUnauthorized{}
}

/*ProductOrderFindUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type ProductOrderFindUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindUnauthorized) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindUnauthorized  %+v", 401, o.Payload)
}

func (o *ProductOrderFindUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindForbidden creates a ProductOrderFindForbidden with default headers values
func NewProductOrderFindForbidden() *ProductOrderFindForbidden {
	return &ProductOrderFindForbidden{}
}

/*ProductOrderFindForbidden handles this case with default header values.

Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type ProductOrderFindForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindForbidden) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindForbidden  %+v", 403, o.Payload)
}

func (o *ProductOrderFindForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindNotFound creates a ProductOrderFindNotFound with default headers values
func NewProductOrderFindNotFound() *ProductOrderFindNotFound {
	return &ProductOrderFindNotFound{}
}

/*ProductOrderFindNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type ProductOrderFindNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindNotFound) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindNotFound  %+v", 404, o.Payload)
}

func (o *ProductOrderFindNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindMethodNotAllowed creates a ProductOrderFindMethodNotAllowed with default headers values
func NewProductOrderFindMethodNotAllowed() *ProductOrderFindMethodNotAllowed {
	return &ProductOrderFindMethodNotAllowed{}
}

/*ProductOrderFindMethodNotAllowed handles this case with default header values.

Method Not Allowed

List of supported error codes:
- 61: Method not allowed
*/
type ProductOrderFindMethodNotAllowed struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ProductOrderFindMethodNotAllowed) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindRequestTimeout creates a ProductOrderFindRequestTimeout with default headers values
func NewProductOrderFindRequestTimeout() *ProductOrderFindRequestTimeout {
	return &ProductOrderFindRequestTimeout{}
}

/*ProductOrderFindRequestTimeout handles this case with default header values.

Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type ProductOrderFindRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindRequestTimeout  %+v", 408, o.Payload)
}

func (o *ProductOrderFindRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindUnprocessableEntity creates a ProductOrderFindUnprocessableEntity with default headers values
func NewProductOrderFindUnprocessableEntity() *ProductOrderFindUnprocessableEntity {
	return &ProductOrderFindUnprocessableEntity{}
}

/*ProductOrderFindUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error





 - code: 100
message: Too many records retrieved - please restrict requested parameter value(s)
description:
*/
type ProductOrderFindUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ProductOrderFindUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindInternalServerError creates a ProductOrderFindInternalServerError with default headers values
func NewProductOrderFindInternalServerError() *ProductOrderFindInternalServerError {
	return &ProductOrderFindInternalServerError{}
}

/*ProductOrderFindInternalServerError handles this case with default header values.

Internal Server Error

List of supported error codes:
- 1: Internal error
*/
type ProductOrderFindInternalServerError struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindInternalServerError) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindInternalServerError  %+v", 500, o.Payload)
}

func (o *ProductOrderFindInternalServerError) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOrderFindServiceUnavailable creates a ProductOrderFindServiceUnavailable with default headers values
func NewProductOrderFindServiceUnavailable() *ProductOrderFindServiceUnavailable {
	return &ProductOrderFindServiceUnavailable{}
}

/*ProductOrderFindServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type ProductOrderFindServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOrderFindServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /productOrder][%d] productOrderFindServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ProductOrderFindServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOrderFindServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
