// Code generated by go-swagger; DO NOT EDIT.

package cancel_product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cancel product order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cancel product order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelProductOrderCreate(params *CancelProductOrderCreateParams) (*CancelProductOrderCreateCreated, error)

	CancelProductOrderFind(params *CancelProductOrderFindParams) (*CancelProductOrderFindOK, error)

	CancelProductOrderGet(params *CancelProductOrderGetParams) (*CancelProductOrderGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelProductOrderCreate creates product order cancellation request

  This operation allows buyer to request a product order cancellation request
*/
func (a *Client) CancelProductOrderCreate(params *CancelProductOrderCreateParams) (*CancelProductOrderCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelProductOrderCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelProductOrderCreate",
		Method:             "POST",
		PathPattern:        "/cancelProductOrder",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelProductOrderCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelProductOrderCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelProductOrderCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelProductOrderFind finds a lost of product order cancellation request s

  This operation allows buyer to retrieve a list of product order cancellation request
*/
func (a *Client) CancelProductOrderFind(params *CancelProductOrderFindParams) (*CancelProductOrderFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelProductOrderFindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelProductOrderFind",
		Method:             "GET",
		PathPattern:        "/cancelProductOrder",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelProductOrderFindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelProductOrderFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelProductOrderFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelProductOrderGet gets a product order cancellation request by id

  This operation allows buyer to retrieve one product order cancellation request
*/
func (a *Client) CancelProductOrderGet(params *CancelProductOrderGetParams) (*CancelProductOrderGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelProductOrderGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelProductOrderGet",
		Method:             "GET",
		PathPattern:        "/cancelProductOrder/{CancelProductOrderId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelProductOrderGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelProductOrderGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelProductOrderGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
