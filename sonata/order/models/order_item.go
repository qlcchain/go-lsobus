// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem An enumeration of the entities that are part of this order expressed in terms of a Product Offering or a Product (for a change order).
//
// swagger:model OrderItem
type OrderItem struct {

	// Target a description file of productOrder extension
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Type of productOrder
	AtType string `json:"@type,omitempty"`

	// action
	// Required: true
	Action ProductActionType `json:"action"`

	// billing account
	BillingAccount *BillingAccountRef `json:"billingAccount,omitempty"`

	// Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)
	// Required: true
	ID *string `json:"id"`

	// order item price
	OrderItemPrice []*OrderItemPrice `json:"orderItemPrice"`

	// order item relationship
	OrderItemRelationship []*OrderItemRelationShip `json:"orderItemRelationship"`

	// pricing method
	PricingMethod PricingMethod `json:"pricingMethod,omitempty"`

	// The identifier references the previously agreed upon pricing terms, as applicable, based on the pricingMethod (e.g. a contract id or tariff id.
	PricingReference string `json:"pricingReference,omitempty"`

	// The length of the contract in months
	PricingTerm int32 `json:"pricingTerm,omitempty"`

	// product
	Product *Product `json:"product,omitempty"`

	// product offering
	ProductOffering *ProductOfferingRef `json:"productOffering,omitempty"`

	// qualification
	Qualification *QualificationRef `json:"qualification,omitempty"`

	// quote
	Quote *QuoteRef `json:"quote,omitempty"`

	// Reference order ID.
	RefOrderID string `json:"refOrderId,omitempty"`

	// Reference order item ID.
	RefOrderItemID string `json:"refOrderItemId,omitempty"`

	// related party
	RelatedParty []*RelatedParty `json:"relatedParty"`

	// state
	// Required: true
	State ProductOrderItemStateType `json:"state"`

	// state change
	StateChange []*StateChange `json:"stateChange"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOffering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateAction(formats strfmt.Registry) error {

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *OrderItem) validateBillingAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAccount) { // not required
		return nil
	}

	if m.BillingAccount != nil {
		if err := m.BillingAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateOrderItemPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderItemPrice) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderItemPrice); i++ {
		if swag.IsZero(m.OrderItemPrice[i]) { // not required
			continue
		}

		if m.OrderItemPrice[i] != nil {
			if err := m.OrderItemPrice[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderItemPrice" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateOrderItemRelationship(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderItemRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderItemRelationship); i++ {
		if swag.IsZero(m.OrderItemRelationship[i]) { // not required
			continue
		}

		if m.OrderItemRelationship[i] != nil {
			if err := m.OrderItemRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderItemRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validatePricingMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PricingMethod) { // not required
		return nil
	}

	if err := m.PricingMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pricingMethod")
		}
		return err
	}

	return nil
}

func (m *OrderItem) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateProductOffering(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductOffering) { // not required
		return nil
	}

	if m.ProductOffering != nil {
		if err := m.ProductOffering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productOffering")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateQualification(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualification) { // not required
		return nil
	}

	if m.Qualification != nil {
		if err := m.Qualification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qualification")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateQuote(formats strfmt.Registry) error {

	if swag.IsZero(m.Quote) { // not required
		return nil
	}

	if m.Quote != nil {
		if err := m.Quote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateRelatedParty(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedParty) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *OrderItem) validateStateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChange) { // not required
		return nil
	}

	for i := 0; i < len(m.StateChange); i++ {
		if swag.IsZero(m.StateChange[i]) { // not required
			continue
		}

		if m.StateChange[i] != nil {
			if err := m.StateChange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stateChange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
