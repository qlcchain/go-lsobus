// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOrder A ProductOrder is a type of business interaction that is used to procure a Product based upon a Product Offering.
//
// swagger:model ProductOrder
type ProductOrder struct {

	// Technical attribute to extend the API
	AtBaseType string `json:"@baseType,omitempty"`

	// Technical attribute to extend the API
	AtSchemaLocation string `json:"@schemaLocation,omitempty"`

	// Technical attribute to extend the API
	AtType string `json:"@type,omitempty"`

	// billing account
	BillingAccount *BillingAccountRef `json:"billingAccount,omitempty"`

	// Billing type.
	BillingType string `json:"billingType,omitempty"`

	// Buyer order creation date. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
	// Format: date-time
	BuyerRequestDate strfmt.DateTime `json:"buyerRequestDate,omitempty"`

	// Identifies the date the Seller canceled the Order
	// Format: date-time
	CancellationDate strfmt.DateTime `json:"cancellationDate,omitempty"`

	// Indicates reason why buyer requested cancellation
	CancellationReason string `json:"cancellationReason,omitempty"`

	// The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
	// Format: date-time
	CompletionDate strfmt.DateTime `json:"completionDate,omitempty"`

	// desired responses
	// Required: true
	DesiredResponses DesiredOrderResponses `json:"desiredResponses"`

	// Expected delivery date amended by the provider
	// Format: date-time
	ExpectedCompletionDate strfmt.DateTime `json:"expectedCompletionDate,omitempty"`

	// Indicates that expedited treatment is requested and any charges generated in provisioning this request (e.g., additional engineering charges or labor charges if applicable) will be accepted by the buyer.
	ExpeditePriority bool `json:"expeditePriority,omitempty"`

	// A number that uniquely identifies an order within the buyer's enterprise.
	// Required: true
	ExternalID *string `json:"externalId"`

	// Hyperlink to access the order
	// Required: true
	Href *string `json:"href"`

	// Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.
	// Required: true
	ID *string `json:"id"`

	// note
	Note []*Note `json:"note"`

	// order activity
	// Required: true
	OrderActivity OrderActivity `json:"orderActivity"`

	// Date when the order was created by seller. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
	// Required: true
	// Format: date-time
	OrderDate *strfmt.DateTime `json:"orderDate"`

	// order item
	// Required: true
	// Min Items: 1
	OrderItem []*OrderItem `json:"orderItem"`

	// order message
	OrderMessage []*OrderMessage `json:"orderMessage"`

	// The version number that the Buyer uses to refer to this particular version of the order
	// Required: true
	OrderVersion *string `json:"orderVersion"`

	// Payment type.
	PaymentType string `json:"paymentType,omitempty"`

	// pricing method
	PricingMethod PricingMethod `json:"pricingMethod,omitempty"`

	// The identifier references the previously agreed upon pricing terms, as applicable, based on the pricingMethod (e.g. a contract id or tariff id.
	PricingReference string `json:"pricingReference,omitempty"`

	// The length of the contract in months.
	PricingTerm int32 `json:"pricingTerm,omitempty"`

	// An integer that specifies that expedited treatment is to be provided in a specific priority.
	// This field will be ignored if the Expedite/Priority Indicator is False.
	// The valid values and the business/operational rules for this field will be defined by the Seller as part of the contracting or on-boarding process.
	Priority int32 `json:"priority,omitempty"`

	// An identifier that is used to group Orders that is important to the Buyer. A ProjectId can be used to relate multiple Orders together
	ProjectID string `json:"projectId,omitempty"`

	// Related Buyer Purchase Order Number (RPON)
	RelatedBuyerPON string `json:"relatedBuyerPON,omitempty"`

	// related party
	// Required: true
	RelatedParty []*RelatedParty `json:"relatedParty"`

	// Identifies the buyer's desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
	// Required: true
	// Format: date-time
	RequestedCompletionDate *strfmt.DateTime `json:"requestedCompletionDate"`

	// The buyer's requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
	// Format: date-time
	RequestedStartDate strfmt.DateTime `json:"requestedStartDate,omitempty"`

	// state
	// Required: true
	State ProductOrderStateType `json:"state"`

	// state change
	StateChange []*StateChange `json:"stateChange"`

	// Within the United States, indicates the provisioning and restoration priority as defined under the TSP Service Vendor Handbook, The valid values are defined in ATIS OBF document: ATIS-0404001
	TspRestorationPriority string `json:"tspRestorationPriority,omitempty"`
}

// Validate validates this product order
func (m *ProductOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerRequestDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateChange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOrder) validateBillingAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAccount) { // not required
		return nil
	}

	if m.BillingAccount != nil {
		if err := m.BillingAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ProductOrder) validateBuyerRequestDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyerRequestDate) { // not required
		return nil
	}

	if err := validate.FormatOf("buyerRequestDate", "body", "date-time", m.BuyerRequestDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateCancellationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("cancellationDate", "body", "date-time", m.CancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completionDate", "body", "date-time", m.CompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateDesiredResponses(formats strfmt.Registry) error {

	if err := m.DesiredResponses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("desiredResponses")
		}
		return err
	}

	return nil
}

func (m *ProductOrder) validateExpectedCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedCompletionDate", "body", "date-time", m.ExpectedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateNote(formats strfmt.Registry) error {

	if swag.IsZero(m.Note) { // not required
		return nil
	}

	for i := 0; i < len(m.Note); i++ {
		if swag.IsZero(m.Note[i]) { // not required
			continue
		}

		if m.Note[i] != nil {
			if err := m.Note[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrder) validateOrderActivity(formats strfmt.Registry) error {

	if err := m.OrderActivity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderActivity")
		}
		return err
	}

	return nil
}

func (m *ProductOrder) validateOrderDate(formats strfmt.Registry) error {

	if err := validate.Required("orderDate", "body", m.OrderDate); err != nil {
		return err
	}

	if err := validate.FormatOf("orderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateOrderItem(formats strfmt.Registry) error {

	if err := validate.Required("orderItem", "body", m.OrderItem); err != nil {
		return err
	}

	iOrderItemSize := int64(len(m.OrderItem))

	if err := validate.MinItems("orderItem", "body", iOrderItemSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OrderItem); i++ {
		if swag.IsZero(m.OrderItem[i]) { // not required
			continue
		}

		if m.OrderItem[i] != nil {
			if err := m.OrderItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrder) validateOrderMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderMessage) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderMessage); i++ {
		if swag.IsZero(m.OrderMessage[i]) { // not required
			continue
		}

		if m.OrderMessage[i] != nil {
			if err := m.OrderMessage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderMessage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrder) validateOrderVersion(formats strfmt.Registry) error {

	if err := validate.Required("orderVersion", "body", m.OrderVersion); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validatePricingMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PricingMethod) { // not required
		return nil
	}

	if err := m.PricingMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pricingMethod")
		}
		return err
	}

	return nil
}

func (m *ProductOrder) validateRelatedParty(formats strfmt.Registry) error {

	if err := validate.Required("relatedParty", "body", m.RelatedParty); err != nil {
		return err
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductOrder) validateRequestedCompletionDate(formats strfmt.Registry) error {

	if err := validate.Required("requestedCompletionDate", "body", m.RequestedCompletionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("requestedCompletionDate", "body", "date-time", m.RequestedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateRequestedStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedStartDate", "body", "date-time", m.RequestedStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrder) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *ProductOrder) validateStateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.StateChange) { // not required
		return nil
	}

	for i := 0; i < len(m.StateChange); i++ {
		if swag.IsZero(m.StateChange[i]) { // not required
			continue
		}

		if m.StateChange[i] != nil {
			if err := m.StateChange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stateChange" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOrder) UnmarshalBinary(b []byte) error {
	var res ProductOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
