// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOrderSummary Structure to define GET without id response. A list of productOrder matching request criteria. Provides Product order summary view.
//
// swagger:model ProductOrderSummary
type ProductOrderSummary struct {

	// ID given by the consumer and only understandable by him (to facilitate his searches afterwards).
	// MEF: Buyer Purchase Order Number
	// Required: true
	ExternalID *string `json:"externalId"`

	// ID created on repository side (OM system)
	// MEF: Unique identifier for the order that is generated by the Seller when the order is initially accepted via an API.
	// Required: true
	ID *string `json:"id"`

	// Date when the order was created
	// Required: true
	// Format: date-time
	OrderDate *strfmt.DateTime `json:"orderDate"`

	// state
	// Required: true
	State ProductOrderStateType `json:"state"`
}

// Validate validates this product order summary
func (m *ProductOrderSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOrderSummary) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderSummary) validateOrderDate(formats strfmt.Registry) error {

	if err := validate.Required("orderDate", "body", m.OrderDate); err != nil {
		return err
	}

	if err := validate.FormatOf("orderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOrderSummary) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOrderSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOrderSummary) UnmarshalBinary(b []byte) error {
	var res ProductOrderSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
